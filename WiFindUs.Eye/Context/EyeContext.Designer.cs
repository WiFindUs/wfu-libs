//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 22/11/2014 7:33:32 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace WiFindUs.Eye.Context
{

    [DatabaseAttribute(Name = "wfu_eye_db")]
    [ProviderAttribute(typeof(Devart.Data.MySql.Linq.Provider.MySqlDataProvider))]
    public partial class EyeContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(EyeContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertDBDeviceAtmosphere(DBDeviceAtmosphere instance);
        partial void UpdateDBDeviceAtmosphere(DBDeviceAtmosphere instance);
        partial void DeleteDBDeviceAtmosphere(DBDeviceAtmosphere instance);
        partial void InsertDBDeviceLocation(DBDeviceLocation instance);
        partial void UpdateDBDeviceLocation(DBDeviceLocation instance);
        partial void DeleteDBDeviceLocation(DBDeviceLocation instance);
        partial void InsertDBDevice(DBDevice instance);
        partial void UpdateDBDevice(DBDevice instance);
        partial void DeleteDBDevice(DBDevice instance);
        partial void InsertDBNodeLocation(DBNodeLocation instance);
        partial void UpdateDBNodeLocation(DBNodeLocation instance);
        partial void DeleteDBNodeLocation(DBNodeLocation instance);
        partial void InsertDBNode(DBNode instance);
        partial void UpdateDBNode(DBNode instance);
        partial void DeleteDBNode(DBNode instance);
        partial void InsertDBUser(DBUser instance);
        partial void UpdateDBUser(DBUser instance);
        partial void DeleteDBUser(DBUser instance);
        partial void InsertDBWaypoint(DBWaypoint instance);
        partial void UpdateDBWaypoint(DBWaypoint instance);
        partial void DeleteDBWaypoint(DBWaypoint instance);
        partial void InsertDBDeviceLogin(DBDeviceLogin instance);
        partial void UpdateDBDeviceLogin(DBDeviceLogin instance);
        partial void DeleteDBDeviceLogin(DBDeviceLogin instance);

        #endregion

        public EyeContext() :
        base(@"User Id=root;Password=omgwtflol87;Host=192.168.1.1;Database=wfu_eye_db;Persist Security Info=True", mappingSource)
        {
            OnCreated();
        }

        public EyeContext(MappingSource mappingSource) :
        base(@"User Id=root;Password=omgwtflol87;Host=192.168.1.1;Database=wfu_eye_db;Persist Security Info=True", mappingSource)
        {
            OnCreated();
        }

        public EyeContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public EyeContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public EyeContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public EyeContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<DBDeviceAtmosphere> DBDeviceAtmospheres
        {
            get
            {
                return this.GetTable<DBDeviceAtmosphere>();
            }
        }

        public Devart.Data.Linq.Table<DBDeviceLocation> DBDeviceLocations
        {
            get
            {
                return this.GetTable<DBDeviceLocation>();
            }
        }

        public Devart.Data.Linq.Table<DBDevice> DBDevices
        {
            get
            {
                return this.GetTable<DBDevice>();
            }
        }

        public Devart.Data.Linq.Table<DBNodeLocation> DBNodeLocations
        {
            get
            {
                return this.GetTable<DBNodeLocation>();
            }
        }

        public Devart.Data.Linq.Table<DBNode> DBNodes
        {
            get
            {
                return this.GetTable<DBNode>();
            }
        }

        public Devart.Data.Linq.Table<DBUser> DBUsers
        {
            get
            {
                return this.GetTable<DBUser>();
            }
        }

        public Devart.Data.Linq.Table<DBWaypoint> DBWaypoints
        {
            get
            {
                return this.GetTable<DBWaypoint>();
            }
        }

        public Devart.Data.Linq.Table<DBDeviceLogin> DBDeviceLogins
        {
            get
            {
                return this.GetTable<DBDeviceLogin>();
            }
        }
    }
}

namespace WiFindUs.Eye.Context
{

    /// <summary>
    /// There are no comments for WiFindUs.Eye.Context.DBDeviceAtmosphere in the schema.
    /// </summary>
    [Table(Name = @"wfu_eye_db.deviceatmospheres")]
    public partial class DBDeviceAtmosphere : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _DeviceID;

        private System.DateTime _Created = DateTime.Now;

        private System.Nullable<double> _Humidity;

        private System.Nullable<double> _AirPressure;

        private System.Nullable<double> _Temperature;

        private System.Nullable<double> _LightLevel;
        #pragma warning restore 0649

        private EntityRef<DBDevice> _DeviceDB;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnDeviceIDChanging(long value);
        partial void OnDeviceIDChanged();
        partial void OnCreatedChanging(System.DateTime value);
        partial void OnCreatedChanged();
        partial void OnHumidityChanging(System.Nullable<double> value);
        partial void OnHumidityChanged();
        partial void OnAirPressureChanging(System.Nullable<double> value);
        partial void OnAirPressureChanged();
        partial void OnTemperatureChanging(System.Nullable<double> value);
        partial void OnTemperatureChanged();
        partial void OnLightLevelChanging(System.Nullable<double> value);
        partial void OnLightLevelChanged();
        #endregion

        public DBDeviceAtmosphere()
        {
            this._DeviceDB  = default(EntityRef<DBDevice>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DeviceID in the schema.
        /// </summary>
        [Column(Storage = "_DeviceID", CanBeNull = false, DbType = "INT(9) UNSIGNED NOT NULL", IsPrimaryKey = true)]
        public long DeviceID
        {
            get
            {
                return this._DeviceID;
            }
        }

    
        /// <summary>
        /// There are no comments for Created in the schema.
        /// </summary>
        [Column(Storage = "_Created", CanBeNull = false, DbType = "DATETIME NOT NULL", IsPrimaryKey = true)]
        public System.DateTime Created
        {
            get
            {
                return this._Created;
            }
        }

    
        /// <summary>
        /// There are no comments for Humidity in the schema.
        /// </summary>
        [Column(Storage = "_Humidity", DbType = "DOUBLE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<double> Humidity
        {
            get
            {
                return this._Humidity;
            }
        }

    
        /// <summary>
        /// There are no comments for AirPressure in the schema.
        /// </summary>
        [Column(Storage = "_AirPressure", DbType = "DOUBLE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<double> AirPressure
        {
            get
            {
                return this._AirPressure;
            }
        }

    
        /// <summary>
        /// There are no comments for Temperature in the schema.
        /// </summary>
        [Column(Storage = "_Temperature", DbType = "DOUBLE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<double> Temperature
        {
            get
            {
                return this._Temperature;
            }
        }

    
        /// <summary>
        /// There are no comments for LightLevel in the schema.
        /// </summary>
        [Column(Storage = "_LightLevel", DbType = "DOUBLE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<double> LightLevel
        {
            get
            {
                return this._LightLevel;
            }
        }

    
        /// <summary>
        /// There are no comments for DeviceDB in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DBDevice_DBDeviceAtmosphere", Storage="_DeviceDB", ThisKey="DeviceID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
        internal DBDevice DeviceDB
        {
            get
            {
                return this._DeviceDB.Entity;
            }
            set
            {
                DBDevice previousValue = this._DeviceDB.Entity;
                if ((previousValue != value) || (this._DeviceDB.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._DeviceDB.Entity = null;
                        previousValue.AtmospheresDB.Remove(this);
                    }
                    this._DeviceDB.Entity = value;
                    if (value != null)
                    {
                        this._DeviceID = value.ID;
                        value.AtmospheresDB.Add(this);
                    }
                    else
                    {
                        this._DeviceID = default(long);
                    }
                    this.SendPropertyChanged("DeviceDB");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for WiFindUs.Eye.Context.DBDeviceLocation in the schema.
    /// </summary>
    [Table(Name = @"wfu_eye_db.devicelocations")]
    public partial class DBDeviceLocation : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _DeviceID;

        private System.DateTime _Created = DateTime.Now;

        private double _Latitude;

        private double _Longitude;

        private System.Nullable<double> _Altitude;

        private System.Nullable<double> _Accuracy;
        #pragma warning restore 0649

        private EntityRef<DBDevice> _DeviceDB;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnDeviceIDChanging(long value);
        partial void OnDeviceIDChanged();
        partial void OnCreatedChanging(System.DateTime value);
        partial void OnCreatedChanged();
        partial void OnLatitudeChanging(double value);
        partial void OnLatitudeChanged();
        partial void OnLongitudeChanging(double value);
        partial void OnLongitudeChanged();
        partial void OnAltitudeChanging(System.Nullable<double> value);
        partial void OnAltitudeChanged();
        partial void OnAccuracyChanging(System.Nullable<double> value);
        partial void OnAccuracyChanged();
        #endregion

        public DBDeviceLocation()
        {
            this._DeviceDB  = default(EntityRef<DBDevice>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DeviceID in the schema.
        /// </summary>
        [Column(Storage = "_DeviceID", CanBeNull = false, DbType = "INT(9) UNSIGNED NOT NULL", IsPrimaryKey = true)]
        public long DeviceID
        {
            get
            {
                return this._DeviceID;
            }
        }

    
        /// <summary>
        /// There are no comments for Created in the schema.
        /// </summary>
        [Column(Storage = "_Created", CanBeNull = false, DbType = "DATETIME NOT NULL", IsPrimaryKey = true)]
        public System.DateTime Created
        {
            get
            {
                return this._Created;
            }
        }

    
        /// <summary>
        /// There are no comments for Latitude in the schema.
        /// </summary>
        [Column(Storage = "_Latitude", CanBeNull = false, DbType = "DOUBLE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public double Latitude
        {
            get
            {
                return this._Latitude;
            }
        }

    
        /// <summary>
        /// There are no comments for Longitude in the schema.
        /// </summary>
        [Column(Storage = "_Longitude", CanBeNull = false, DbType = "DOUBLE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public double Longitude
        {
            get
            {
                return this._Longitude;
            }
        }

    
        /// <summary>
        /// There are no comments for Altitude in the schema.
        /// </summary>
        [Column(Storage = "_Altitude", DbType = "DOUBLE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<double> Altitude
        {
            get
            {
                return this._Altitude;
            }
        }

    
        /// <summary>
        /// There are no comments for Accuracy in the schema.
        /// </summary>
        [Column(Storage = "_Accuracy", DbType = "DOUBLE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<double> Accuracy
        {
            get
            {
                return this._Accuracy;
            }
        }

    
        /// <summary>
        /// There are no comments for DeviceDB in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DBDevice_DBDeviceLocation", Storage="_DeviceDB", ThisKey="DeviceID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
        internal DBDevice DeviceDB
        {
            get
            {
                return this._DeviceDB.Entity;
            }
            set
            {
                DBDevice previousValue = this._DeviceDB.Entity;
                if ((previousValue != value) || (this._DeviceDB.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._DeviceDB.Entity = null;
                        previousValue.LocationsDB.Remove(this);
                    }
                    this._DeviceDB.Entity = value;
                    if (value != null)
                    {
                        this._DeviceID = value.ID;
                        value.LocationsDB.Add(this);
                    }
                    else
                    {
                        this._DeviceID = default(long);
                    }
                    this.SendPropertyChanged("DeviceDB");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for WiFindUs.Eye.Context.DBDevice in the schema.
    /// </summary>
    [Table(Name = @"wfu_eye_db.devices")]
    public partial class DBDevice : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _ID;

        private System.DateTime _Created = DateTime.Now;

        private System.DateTime _Updated = DateTime.Now;

        private string _Type = @"PHO";

        private long _IPAddressRaw = 0;

        private System.Nullable<long> _WaypointID;
        #pragma warning restore 0649

        private EntitySet<DBDeviceAtmosphere> _AtmospheresDB;

        private EntitySet<DBDeviceLocation> _LocationsDB;

        private EntityRef<DBWaypoint> _AssignedWaypointDB;

        private EntitySet<DBDeviceLogin> _LoginsDB;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(long value);
        partial void OnIDChanged();
        partial void OnCreatedChanging(System.DateTime value);
        partial void OnCreatedChanged();
        partial void OnUpdatedChanging(System.DateTime value);
        partial void OnUpdatedChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        partial void OnIPAddressRawChanging(long value);
        partial void OnIPAddressRawChanged();
        partial void OnWaypointIDChanging(System.Nullable<long> value);
        partial void OnWaypointIDChanged();
        #endregion

        public DBDevice()
        {
            this._AtmospheresDB = new EntitySet<DBDeviceAtmosphere>(new Action<DBDeviceAtmosphere>(this.attach_AtmospheresDB), new Action<DBDeviceAtmosphere>(this.detach_AtmospheresDB));
            this._LocationsDB = new EntitySet<DBDeviceLocation>(new Action<DBDeviceLocation>(this.attach_LocationsDB), new Action<DBDeviceLocation>(this.detach_LocationsDB));
            this._AssignedWaypointDB  = default(EntityRef<DBWaypoint>);
            this._LoginsDB = new EntitySet<DBDeviceLogin>(new Action<DBDeviceLogin>(this.attach_LoginsDB), new Action<DBDeviceLogin>(this.detach_LoginsDB));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "INT(9) UNSIGNED NOT NULL", IsPrimaryKey = true)]
        public long ID
        {
            get
            {
                return this._ID;
            }
        }

    
        /// <summary>
        /// There are no comments for Created in the schema.
        /// </summary>
        [Column(Storage = "_Created", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Created
        {
            get
            {
                return this._Created;
            }
        }

    
        /// <summary>
        /// There are no comments for Updated in the schema.
        /// </summary>
        [Column(Storage = "_Updated", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Updated
        {
            get
            {
                return this._Updated;
            }
        }

    
        /// <summary>
        /// There are no comments for Type in the schema.
        /// </summary>
        [Column(Storage = "_Type", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Type
        {
            get
            {
                return this._Type;
            }
        }

    
        /// <summary>
        /// There are no comments for IPAddressRaw in the schema.
        /// </summary>
        [Column(Name = @"IPAddress", Storage = "_IPAddressRaw", CanBeNull = false, DbType = "INT(9) UNSIGNED NOT NULL", UpdateCheck = UpdateCheck.Never)]
        protected long IPAddressRaw
        {
            get
            {
                return this._IPAddressRaw;
            }
        }

    
        /// <summary>
        /// There are no comments for WaypointID in the schema.
        /// </summary>
        [Column(Storage = "_WaypointID", DbType = "INT(9) UNSIGNED NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> WaypointID
        {
            get
            {
                return this._WaypointID;
            }
            set
            {
                if (this._WaypointID != value)
                {
                    if (this._AssignedWaypointDB.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnWaypointIDChanging(value);
                    this.SendPropertyChanging();
                    this._WaypointID = value;
                    this.SendPropertyChanged("WaypointID");
                    this.OnWaypointIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AtmospheresDB in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DBDevice_DBDeviceAtmosphere", Storage="_AtmospheresDB", ThisKey="ID", OtherKey="DeviceID", DeleteRule="CASCADE")]
        internal EntitySet<DBDeviceAtmosphere> AtmospheresDB
        {
            get
            {
                return this._AtmospheresDB;
            }
            set
            {
                this._AtmospheresDB.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for LocationsDB in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DBDevice_DBDeviceLocation", Storage="_LocationsDB", ThisKey="ID", OtherKey="DeviceID", DeleteRule="CASCADE")]
        internal EntitySet<DBDeviceLocation> LocationsDB
        {
            get
            {
                return this._LocationsDB;
            }
            set
            {
                this._LocationsDB.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for AssignedWaypointDB in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DBWaypoint_DBDevice", Storage="_AssignedWaypointDB", ThisKey="WaypointID", OtherKey="ID", IsForeignKey=true)]
        internal DBWaypoint AssignedWaypointDB
        {
            get
            {
                return this._AssignedWaypointDB.Entity;
            }
            set
            {
                DBWaypoint previousValue = this._AssignedWaypointDB.Entity;
                if ((previousValue != value) || (this._AssignedWaypointDB.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._AssignedWaypointDB.Entity = null;
                        previousValue.AssignedDevicesDB.Remove(this);
                    }
                    this._AssignedWaypointDB.Entity = value;
                    if (value != null)
                    {
                        this._WaypointID = value.ID;
                        value.AssignedDevicesDB.Add(this);
                    }
                    else
                    {
                        this._WaypointID = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("AssignedWaypointDB");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LoginsDB in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DBDevice_DBDeviceLogin", Storage="_LoginsDB", ThisKey="ID", OtherKey="DeviceID", DeleteRule="CASCADE")]
        internal EntitySet<DBDeviceLogin> LoginsDB
        {
            get
            {
                return this._LoginsDB;
            }
            set
            {
                this._LoginsDB.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_AtmospheresDB(DBDeviceAtmosphere entity)
        {
            this.SendPropertyChanging("AtmospheresDB");
            entity.DeviceDB = this;
        }
    
        private void detach_AtmospheresDB(DBDeviceAtmosphere entity)
        {
            this.SendPropertyChanging("AtmospheresDB");
            entity.DeviceDB = null;
        }

        private void attach_LocationsDB(DBDeviceLocation entity)
        {
            this.SendPropertyChanging("LocationsDB");
            entity.DeviceDB = this;
        }
    
        private void detach_LocationsDB(DBDeviceLocation entity)
        {
            this.SendPropertyChanging("LocationsDB");
            entity.DeviceDB = null;
        }

        private void attach_LoginsDB(DBDeviceLogin entity)
        {
            this.SendPropertyChanging("LoginsDB");
            entity.DeviceDB = this;
        }
    
        private void detach_LoginsDB(DBDeviceLogin entity)
        {
            this.SendPropertyChanging("LoginsDB");
            entity.DeviceDB = null;
        }
    }

    /// <summary>
    /// There are no comments for WiFindUs.Eye.Context.DBNodeLocation in the schema.
    /// </summary>
    [Table(Name = @"wfu_eye_db.nodelocations")]
    public partial class DBNodeLocation : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _NodeID;

        private System.DateTime _Created = DateTime.Now;

        private double _Latitude;

        private double _Longitude;

        private System.Nullable<double> _Altitude;

        private System.Nullable<double> _Accuracy;
        #pragma warning restore 0649

        private EntityRef<DBNode> _NodeDB;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnNodeIDChanging(long value);
        partial void OnNodeIDChanged();
        partial void OnCreatedChanging(System.DateTime value);
        partial void OnCreatedChanged();
        partial void OnLatitudeChanging(double value);
        partial void OnLatitudeChanged();
        partial void OnLongitudeChanging(double value);
        partial void OnLongitudeChanged();
        partial void OnAltitudeChanging(System.Nullable<double> value);
        partial void OnAltitudeChanged();
        partial void OnAccuracyChanging(System.Nullable<double> value);
        partial void OnAccuracyChanged();
        #endregion

        public DBNodeLocation()
        {
            this._NodeDB  = default(EntityRef<DBNode>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for NodeID in the schema.
        /// </summary>
        [Column(Storage = "_NodeID", CanBeNull = false, DbType = "INT(9) UNSIGNED NOT NULL", IsPrimaryKey = true)]
        public long NodeID
        {
            get
            {
                return this._NodeID;
            }
        }

    
        /// <summary>
        /// There are no comments for Created in the schema.
        /// </summary>
        [Column(Storage = "_Created", CanBeNull = false, DbType = "DATETIME NOT NULL", IsPrimaryKey = true)]
        public System.DateTime Created
        {
            get
            {
                return this._Created;
            }
        }

    
        /// <summary>
        /// There are no comments for Latitude in the schema.
        /// </summary>
        [Column(Storage = "_Latitude", CanBeNull = false, DbType = "DOUBLE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public double Latitude
        {
            get
            {
                return this._Latitude;
            }
        }

    
        /// <summary>
        /// There are no comments for Longitude in the schema.
        /// </summary>
        [Column(Storage = "_Longitude", CanBeNull = false, DbType = "DOUBLE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public double Longitude
        {
            get
            {
                return this._Longitude;
            }
        }

    
        /// <summary>
        /// There are no comments for Altitude in the schema.
        /// </summary>
        [Column(Storage = "_Altitude", DbType = "DOUBLE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<double> Altitude
        {
            get
            {
                return this._Altitude;
            }
        }

    
        /// <summary>
        /// There are no comments for Accuracy in the schema.
        /// </summary>
        [Column(Storage = "_Accuracy", DbType = "DOUBLE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<double> Accuracy
        {
            get
            {
                return this._Accuracy;
            }
        }

    
        /// <summary>
        /// There are no comments for NodeDB in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DBNode_DBNodeLocation", Storage="_NodeDB", ThisKey="NodeID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
        internal DBNode NodeDB
        {
            get
            {
                return this._NodeDB.Entity;
            }
            set
            {
                DBNode previousValue = this._NodeDB.Entity;
                if ((previousValue != value) || (this._NodeDB.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._NodeDB.Entity = null;
                        previousValue.LocationsDB.Remove(this);
                    }
                    this._NodeDB.Entity = value;
                    if (value != null)
                    {
                        this._NodeID = value.ID;
                        value.LocationsDB.Add(this);
                    }
                    else
                    {
                        this._NodeID = default(long);
                    }
                    this.SendPropertyChanged("NodeDB");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for WiFindUs.Eye.Context.DBNode in the schema.
    /// </summary>
    [Table(Name = @"wfu_eye_db.nodes")]
    public partial class DBNode : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _ID;

        private System.DateTime _Created = DateTime.Now;

        private System.DateTime _Updated = DateTime.Now;

        private long _IPAddressRaw = 0;

        private long _Number = 0;
        #pragma warning restore 0649

        private EntitySet<DBNodeLocation> _LocationsDB;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(long value);
        partial void OnIDChanged();
        partial void OnCreatedChanging(System.DateTime value);
        partial void OnCreatedChanged();
        partial void OnUpdatedChanging(System.DateTime value);
        partial void OnUpdatedChanged();
        partial void OnIPAddressRawChanging(long value);
        partial void OnIPAddressRawChanged();
        partial void OnNumberChanging(long value);
        partial void OnNumberChanged();
        #endregion

        public DBNode()
        {
            this._LocationsDB = new EntitySet<DBNodeLocation>(new Action<DBNodeLocation>(this.attach_LocationsDB), new Action<DBNodeLocation>(this.detach_LocationsDB));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "INT(9) UNSIGNED NOT NULL", IsPrimaryKey = true)]
        public long ID
        {
            get
            {
                return this._ID;
            }
        }

    
        /// <summary>
        /// There are no comments for Created in the schema.
        /// </summary>
        [Column(Storage = "_Created", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Created
        {
            get
            {
                return this._Created;
            }
        }

    
        /// <summary>
        /// There are no comments for Updated in the schema.
        /// </summary>
        [Column(Storage = "_Updated", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Updated
        {
            get
            {
                return this._Updated;
            }
        }

    
        /// <summary>
        /// There are no comments for IPAddressRaw in the schema.
        /// </summary>
        [Column(Name = @"IPAddress", Storage = "_IPAddressRaw", CanBeNull = false, DbType = "INT(9) UNSIGNED NOT NULL", UpdateCheck = UpdateCheck.Never)]
        protected long IPAddressRaw
        {
            get
            {
                return this._IPAddressRaw;
            }
        }

    
        /// <summary>
        /// There are no comments for Number in the schema.
        /// </summary>
        [Column(Storage = "_Number", CanBeNull = false, DbType = "INT(9) UNSIGNED NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long Number
        {
            get
            {
                return this._Number;
            }
        }

    
        /// <summary>
        /// There are no comments for LocationsDB in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DBNode_DBNodeLocation", Storage="_LocationsDB", ThisKey="ID", OtherKey="NodeID", DeleteRule="CASCADE")]
        internal EntitySet<DBNodeLocation> LocationsDB
        {
            get
            {
                return this._LocationsDB;
            }
            set
            {
                this._LocationsDB.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_LocationsDB(DBNodeLocation entity)
        {
            this.SendPropertyChanging("LocationsDB");
            entity.NodeDB = this;
        }
    
        private void detach_LocationsDB(DBNodeLocation entity)
        {
            this.SendPropertyChanging("LocationsDB");
            entity.NodeDB = null;
        }
    }

    /// <summary>
    /// There are no comments for WiFindUs.Eye.Context.DBUser in the schema.
    /// </summary>
    [Table(Name = @"wfu_eye_db.users")]
    public partial class DBUser : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _ID;

        private System.DateTime _Created = DateTime.Now;

        private string _NameFirst;

        private string _NameMiddle;

        private string _NameLast;

        private string _Type;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(long value);
        partial void OnIDChanged();
        partial void OnCreatedChanging(System.DateTime value);
        partial void OnCreatedChanged();
        partial void OnNameFirstChanging(string value);
        partial void OnNameFirstChanged();
        partial void OnNameMiddleChanging(string value);
        partial void OnNameMiddleChanged();
        partial void OnNameLastChanging(string value);
        partial void OnNameLastChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        #endregion

        public DBUser()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(9) UNSIGNED NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long ID
        {
            get
            {
                return this._ID;
            }
        }

    
        /// <summary>
        /// There are no comments for Created in the schema.
        /// </summary>
        [Column(Storage = "_Created", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Created
        {
            get
            {
                return this._Created;
            }
        }

    
        /// <summary>
        /// There are no comments for NameFirst in the schema.
        /// </summary>
        [Column(Storage = "_NameFirst", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string NameFirst
        {
            get
            {
                return this._NameFirst;
            }
            set
            {
                if (this._NameFirst != value)
                {
                    this.OnNameFirstChanging(value);
                    this.SendPropertyChanging();
                    this._NameFirst = value;
                    this.SendPropertyChanged("NameFirst");
                    this.OnNameFirstChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NameMiddle in the schema.
        /// </summary>
        [Column(Storage = "_NameMiddle", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string NameMiddle
        {
            get
            {
                return this._NameMiddle;
            }
            set
            {
                if (this._NameMiddle != value)
                {
                    this.OnNameMiddleChanging(value);
                    this.SendPropertyChanging();
                    this._NameMiddle = value;
                    this.SendPropertyChanged("NameMiddle");
                    this.OnNameMiddleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NameLast in the schema.
        /// </summary>
        [Column(Storage = "_NameLast", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string NameLast
        {
            get
            {
                return this._NameLast;
            }
            set
            {
                if (this._NameLast != value)
                {
                    this.OnNameLastChanging(value);
                    this.SendPropertyChanging();
                    this._NameLast = value;
                    this.SendPropertyChanged("NameLast");
                    this.OnNameLastChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Type in the schema.
        /// </summary>
        [Column(Storage = "_Type", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for WiFindUs.Eye.Context.DBWaypoint in the schema.
    /// </summary>
    [Table(Name = @"wfu_eye_db.waypoints")]
    public partial class DBWaypoint : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _ID;

        private System.DateTime _Created = DateTime.Now;

        private double _Latitude;

        private double _Longitude;

        private System.Nullable<double> _Altitude;

        private System.Nullable<double> _Accuracy;

        private string _Type;

        private string _Category;

        private string _Description;

        private int _Severity = 0;

        private int _Code = 0;

        private System.Nullable<long> _NextWaypointID;

        private System.Nullable<long> _ReportedByID;

        private bool _Archived = false;

        private System.Nullable<System.DateTime> _ArchivedTime;
        #pragma warning restore 0649

        private EntitySet<DBDevice> _AssignedDevicesDB;

        private EntityRef<DBUser> _ReportingUserDB;

        private EntitySet<DBUser> _ArchivedRespondersDB;

        private EntityRef<DBWaypoint> _NextWaypointDB;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(long value);
        partial void OnIDChanged();
        partial void OnCreatedChanging(System.DateTime value);
        partial void OnCreatedChanged();
        partial void OnLatitudeChanging(double value);
        partial void OnLatitudeChanged();
        partial void OnLongitudeChanging(double value);
        partial void OnLongitudeChanged();
        partial void OnAltitudeChanging(System.Nullable<double> value);
        partial void OnAltitudeChanged();
        partial void OnAccuracyChanging(System.Nullable<double> value);
        partial void OnAccuracyChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        partial void OnCategoryChanging(string value);
        partial void OnCategoryChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnSeverityChanging(int value);
        partial void OnSeverityChanged();
        partial void OnCodeChanging(int value);
        partial void OnCodeChanged();
        partial void OnNextWaypointIDChanging(System.Nullable<long> value);
        partial void OnNextWaypointIDChanged();
        partial void OnReportedByIDChanging(System.Nullable<long> value);
        partial void OnReportedByIDChanged();
        partial void OnArchivedChanging(bool value);
        partial void OnArchivedChanged();
        partial void OnArchivedTimeChanging(System.Nullable<System.DateTime> value);
        partial void OnArchivedTimeChanged();
        #endregion

        public DBWaypoint()
        {
            this._AssignedDevicesDB = new EntitySet<DBDevice>(new Action<DBDevice>(this.attach_AssignedDevicesDB), new Action<DBDevice>(this.detach_AssignedDevicesDB));
            this._ReportingUserDB  = default(EntityRef<DBUser>);
            this._ArchivedRespondersDB = new EntitySet<DBUser>(new Action<DBUser>(this.attach_ArchivedRespondersDB), new Action<DBUser>(this.detach_ArchivedRespondersDB));
            this._NextWaypointDB  = default(EntityRef<DBWaypoint>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(9) UNSIGNED NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long ID
        {
            get
            {
                return this._ID;
            }
        }

    
        /// <summary>
        /// There are no comments for Created in the schema.
        /// </summary>
        [Column(Storage = "_Created", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Created
        {
            get
            {
                return this._Created;
            }
        }

    
        /// <summary>
        /// There are no comments for Latitude in the schema.
        /// </summary>
        [Column(Storage = "_Latitude", CanBeNull = false, DbType = "DOUBLE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public double Latitude
        {
            get
            {
                return this._Latitude;
            }
        }

    
        /// <summary>
        /// There are no comments for Longitude in the schema.
        /// </summary>
        [Column(Storage = "_Longitude", CanBeNull = false, DbType = "DOUBLE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public double Longitude
        {
            get
            {
                return this._Longitude;
            }
        }

    
        /// <summary>
        /// There are no comments for Altitude in the schema.
        /// </summary>
        [Column(Storage = "_Altitude", DbType = "DOUBLE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<double> Altitude
        {
            get
            {
                return this._Altitude;
            }
        }

    
        /// <summary>
        /// There are no comments for Accuracy in the schema.
        /// </summary>
        [Column(Storage = "_Accuracy", DbType = "DOUBLE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<double> Accuracy
        {
            get
            {
                return this._Accuracy;
            }
        }

    
        /// <summary>
        /// There are no comments for Type in the schema.
        /// </summary>
        [Column(Storage = "_Type", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Category in the schema.
        /// </summary>
        [Column(Storage = "_Category", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Category
        {
            get
            {
                return this._Category;
            }
            set
            {
                if (this._Category != value)
                {
                    this.OnCategoryChanging(value);
                    this.SendPropertyChanging();
                    this._Category = value;
                    this.SendPropertyChanged("Category");
                    this.OnCategoryChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Storage = "_Description", CanBeNull = false, DbType = "VARCHAR(2048) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Severity in the schema.
        /// </summary>
        [Column(Storage = "_Severity", CanBeNull = false, DbType = "INT(9) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Severity
        {
            get
            {
                return this._Severity;
            }
            set
            {
                if (this._Severity != value)
                {
                    this.OnSeverityChanging(value);
                    this.SendPropertyChanging();
                    this._Severity = value;
                    this.SendPropertyChanged("Severity");
                    this.OnSeverityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Code in the schema.
        /// </summary>
        [Column(Storage = "_Code", CanBeNull = false, DbType = "INT(9) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if (this._Code != value)
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NextWaypointID in the schema.
        /// </summary>
        [Column(Storage = "_NextWaypointID", DbType = "INT(9) UNSIGNED NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> NextWaypointID
        {
            get
            {
                return this._NextWaypointID;
            }
            set
            {
                if (this._NextWaypointID != value)
                {
                    if (this._NextWaypointDB.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnNextWaypointIDChanging(value);
                    this.SendPropertyChanging();
                    this._NextWaypointID = value;
                    this.SendPropertyChanged("NextWaypointID");
                    this.OnNextWaypointIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReportedByID in the schema.
        /// </summary>
        [Column(Storage = "_ReportedByID", DbType = "INT(9) UNSIGNED NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> ReportedByID
        {
            get
            {
                return this._ReportedByID;
            }
            set
            {
                if (this._ReportedByID != value)
                {
                    if (this._ReportingUserDB.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnReportedByIDChanging(value);
                    this.SendPropertyChanging();
                    this._ReportedByID = value;
                    this.SendPropertyChanged("ReportedByID");
                    this.OnReportedByIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Archived in the schema.
        /// </summary>
        [Column(Storage = "_Archived", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Archived
        {
            get
            {
                return this._Archived;
            }
            set
            {
                if (this._Archived != value)
                {
                    this.OnArchivedChanging(value);
                    this.SendPropertyChanging();
                    this._Archived = value;
                    this.SendPropertyChanged("Archived");
                    this.OnArchivedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ArchivedTime in the schema.
        /// </summary>
        [Column(Storage = "_ArchivedTime", DbType = "DATETIME NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> ArchivedTime
        {
            get
            {
                return this._ArchivedTime;
            }
            set
            {
                if (this._ArchivedTime != value)
                {
                    this.OnArchivedTimeChanging(value);
                    this.SendPropertyChanging();
                    this._ArchivedTime = value;
                    this.SendPropertyChanged("ArchivedTime");
                    this.OnArchivedTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AssignedDevicesDB in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DBWaypoint_DBDevice", Storage="_AssignedDevicesDB", ThisKey="ID", OtherKey="WaypointID", DeleteRule="SET NULL")]
        internal EntitySet<DBDevice> AssignedDevicesDB
        {
            get
            {
                return this._AssignedDevicesDB;
            }
            set
            {
                this._AssignedDevicesDB.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for ReportingUserDB in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DBUser_DBWaypoint", Storage="_ReportingUserDB", ThisKey="ReportedByID", OtherKey="ID", IsForeignKey=true)]
        internal DBUser ReportingUserDB
        {
            get
            {
                return this._ReportingUserDB.Entity;
            }
            set
            {
                DBUser previousValue = this._ReportingUserDB.Entity;
                if ((previousValue != value) || (this._ReportingUserDB.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._ReportingUserDB.Entity = null;
                    }
                    this._ReportingUserDB.Entity = value;
                    if (value != null)
                    {
                        this._ReportedByID = value.ID;
                    }
                    else
                    {
                        this._ReportedByID = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("ReportingUserDB");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ArchivedRespondersDB in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DBWaypoint_DBUser", Storage="_ArchivedRespondersDB", ThisKey="ID", OtherKey="ID", LinkTableName=@"wfu_eye_db.archivedwaypointresponders", LinkThisKey=@"WaypointID", LinkOtherKey=@"UserID")]
        internal EntitySet<DBUser> ArchivedRespondersDB
        {
            get
            {
                return this._ArchivedRespondersDB;
            }
            set
            {
                this._ArchivedRespondersDB.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for NextWaypointDB in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DBWaypoint_DBWaypoint", Storage="_NextWaypointDB", ThisKey="NextWaypointID", OtherKey="ID", IsForeignKey=true)]
        internal DBWaypoint NextWaypointDB
        {
            get
            {
                return this._NextWaypointDB.Entity;
            }
            set
            {
                DBWaypoint previousValue = this._NextWaypointDB.Entity;
                if ((previousValue != value) || (this._NextWaypointDB.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._NextWaypointDB.Entity = null;
                    }
                    this._NextWaypointDB.Entity = value;
                    if (value != null)
                    {
                        this._NextWaypointID = value.ID;
                    }
                    else
                    {
                        this._NextWaypointID = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("NextWaypointDB");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_AssignedDevicesDB(DBDevice entity)
        {
            this.SendPropertyChanging("AssignedDevicesDB");
            entity.AssignedWaypointDB = this;
        }
    
        private void detach_AssignedDevicesDB(DBDevice entity)
        {
            this.SendPropertyChanging("AssignedDevicesDB");
            entity.AssignedWaypointDB = null;
        }

        private void attach_ArchivedRespondersDB(DBUser entity)
        {
            this.SendPropertyChanging("ArchivedRespondersDB");
        }
    
        private void detach_ArchivedRespondersDB(DBUser entity)
        {
            this.SendPropertyChanging("ArchivedRespondersDB");
        }
    }

    /// <summary>
    /// There are no comments for WiFindUs.Eye.Context.DBDeviceLogin in the schema.
    /// </summary>
    [Table(Name = @"DeviceLogins")]
    public partial class DBDeviceLogin : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _DeviceID;

        private System.Nullable<long> _UserID;

        private System.DateTime _Created;
        #pragma warning restore 0649

        private EntityRef<DBDevice> _DeviceDB;

        private EntityRef<DBUser> _UserDB;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnDeviceIDChanging(long value);
        partial void OnDeviceIDChanged();
        partial void OnUserIDChanging(System.Nullable<long> value);
        partial void OnUserIDChanged();
        partial void OnCreatedChanging(System.DateTime value);
        partial void OnCreatedChanged();
        #endregion

        public DBDeviceLogin()
        {
            this._DeviceDB  = default(EntityRef<DBDevice>);
            this._UserDB  = default(EntityRef<DBUser>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DeviceID in the schema.
        /// </summary>
        [Column(Storage = "_DeviceID", CanBeNull = false, DbType = "INT(9) UNSIGNED NOT NULL", IsPrimaryKey = true)]
        public long DeviceID
        {
            get
            {
                return this._DeviceID;
            }
        }

    
        /// <summary>
        /// There are no comments for UserID in the schema.
        /// </summary>
        [Column(Storage = "_UserID", DbType = "int(9) UNSIGNED", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> UserID
        {
            get
            {
                return this._UserID;
            }
        }

    
        /// <summary>
        /// There are no comments for Created in the schema.
        /// </summary>
        [Column(Storage = "_Created", CanBeNull = false, DbType = "datetime NOT NULL", IsPrimaryKey = true)]
        public System.DateTime Created
        {
            get
            {
                return this._Created;
            }
        }

    
        /// <summary>
        /// There are no comments for DeviceDB in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DBDevice_DBDeviceLogin", Storage="_DeviceDB", ThisKey="DeviceID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
        internal DBDevice DeviceDB
        {
            get
            {
                return this._DeviceDB.Entity;
            }
            set
            {
                DBDevice previousValue = this._DeviceDB.Entity;
                if ((previousValue != value) || (this._DeviceDB.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._DeviceDB.Entity = null;
                        previousValue.LoginsDB.Remove(this);
                    }
                    this._DeviceDB.Entity = value;
                    if (value != null)
                    {
                        this._DeviceID = value.ID;
                        value.LoginsDB.Add(this);
                    }
                    else
                    {
                        this._DeviceID = default(long);
                    }
                    this.SendPropertyChanged("DeviceDB");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserDB in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DBUser_DBDeviceLogin", Storage="_UserDB", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
        internal DBUser UserDB
        {
            get
            {
                return this._UserDB.Entity;
            }
            set
            {
                DBUser previousValue = this._UserDB.Entity;
                if ((previousValue != value) || (this._UserDB.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._UserDB.Entity = null;
                    }
                    this._UserDB.Entity = value;
                    if (value != null)
                    {
                        this._UserID = value.ID;
                    }
                    else
                    {
                        this._UserID = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("UserDB");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
