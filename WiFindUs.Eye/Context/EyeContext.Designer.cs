//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 22/11/2014 5:18:49 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace WiFindUs.Eye.Context
{

    [DatabaseAttribute(Name = "wfu_eye_db")]
    [ProviderAttribute(typeof(Devart.Data.MySql.Linq.Provider.MySqlDataProvider))]
    public partial class EyeContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(EyeContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertDBDeviceState(DBDeviceState instance);
        partial void UpdateDBDeviceState(DBDeviceState instance);
        partial void DeleteDBDeviceState(DBDeviceState instance);
        partial void InsertDBDevice(DBDevice instance);
        partial void UpdateDBDevice(DBDevice instance);
        partial void DeleteDBDevice(DBDevice instance);
        partial void InsertDBNodeState(DBNodeState instance);
        partial void UpdateDBNodeState(DBNodeState instance);
        partial void DeleteDBNodeState(DBNodeState instance);
        partial void InsertDBNode(DBNode instance);
        partial void UpdateDBNode(DBNode instance);
        partial void DeleteDBNode(DBNode instance);
        partial void InsertDBUser(DBUser instance);
        partial void UpdateDBUser(DBUser instance);
        partial void DeleteDBUser(DBUser instance);
        partial void InsertDBWaypoint(DBWaypoint instance);
        partial void UpdateDBWaypoint(DBWaypoint instance);
        partial void DeleteDBWaypoint(DBWaypoint instance);

        #endregion

        public EyeContext() :
        base(@"User Id=root;Password=omgwtflol87;Host=192.168.1.1;Database=wfu_eye_db;Persist Security Info=True", mappingSource)
        {
            OnCreated();
        }

        public EyeContext(MappingSource mappingSource) :
        base(@"User Id=root;Password=omgwtflol87;Host=192.168.1.1;Database=wfu_eye_db;Persist Security Info=True", mappingSource)
        {
            OnCreated();
        }

        public EyeContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public EyeContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public EyeContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public EyeContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<DBDeviceState> DBDeviceStates
        {
            get
            {
                return this.GetTable<DBDeviceState>();
            }
        }

        public Devart.Data.Linq.Table<DBDevice> DBDevices
        {
            get
            {
                return this.GetTable<DBDevice>();
            }
        }

        public Devart.Data.Linq.Table<DBNodeState> DBNodeStates
        {
            get
            {
                return this.GetTable<DBNodeState>();
            }
        }

        public Devart.Data.Linq.Table<DBNode> DBNodes
        {
            get
            {
                return this.GetTable<DBNode>();
            }
        }

        public Devart.Data.Linq.Table<DBUser> DBUsers
        {
            get
            {
                return this.GetTable<DBUser>();
            }
        }

        public Devart.Data.Linq.Table<DBWaypoint> DBWaypoints
        {
            get
            {
                return this.GetTable<DBWaypoint>();
            }
        }
    }
}

namespace WiFindUs.Eye.Context
{

    /// <summary>
    /// There are no comments for WiFindUs.Eye.Context.DBDeviceState in the schema.
    /// </summary>
    [Table(Name = @"wfu_eye_db.DeviceStates")]
    public partial class DBDeviceState : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _DeviceID;

        private System.Nullable<long> _UserID;

        private System.DateTime _Created = DateTime.Now;

        private double _Latitude;

        private double _Longitude;

        private System.Nullable<double> _Altitude;

        private System.Nullable<double> _Accuracy;

        private System.Nullable<double> _Humidity;

        private System.Nullable<double> _AirPressure;

        private System.Nullable<double> _Temperature;

        private System.Nullable<double> _LightLevel;

        private System.Nullable<bool> _Charging = false;

        private System.Nullable<double> _BatteryLevel;

        private long _IPAddressRaw = 0;
        #pragma warning restore 0649

        private EntityRef<DBDevice> _DBDevice;

        private EntityRef<DBUser> _DBUser;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnDeviceIDChanging(long value);
        partial void OnDeviceIDChanged();
        partial void OnUserIDChanging(System.Nullable<long> value);
        partial void OnUserIDChanged();
        partial void OnCreatedChanging(System.DateTime value);
        partial void OnCreatedChanged();
        partial void OnLatitudeChanging(double value);
        partial void OnLatitudeChanged();
        partial void OnLongitudeChanging(double value);
        partial void OnLongitudeChanged();
        partial void OnAltitudeChanging(System.Nullable<double> value);
        partial void OnAltitudeChanged();
        partial void OnAccuracyChanging(System.Nullable<double> value);
        partial void OnAccuracyChanged();
        partial void OnHumidityChanging(System.Nullable<double> value);
        partial void OnHumidityChanged();
        partial void OnAirPressureChanging(System.Nullable<double> value);
        partial void OnAirPressureChanged();
        partial void OnTemperatureChanging(System.Nullable<double> value);
        partial void OnTemperatureChanged();
        partial void OnLightLevelChanging(System.Nullable<double> value);
        partial void OnLightLevelChanged();
        partial void OnChargingChanging(System.Nullable<bool> value);
        partial void OnChargingChanged();
        partial void OnBatteryLevelChanging(System.Nullable<double> value);
        partial void OnBatteryLevelChanged();
        partial void OnIPAddressRawChanging(long value);
        partial void OnIPAddressRawChanged();
        #endregion

        public DBDeviceState()
        {
            this._DBDevice  = default(EntityRef<DBDevice>);
            this._DBUser  = default(EntityRef<DBUser>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DeviceID in the schema.
        /// </summary>
        [Column(Storage = "_DeviceID", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        public long DeviceID
        {
            get
            {
                return this._DeviceID;
            }
        }

    
        /// <summary>
        /// There are no comments for UserID in the schema.
        /// </summary>
        [Column(Storage = "_UserID", DbType = "bigint NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> UserID
        {
            get
            {
                return this._UserID;
            }
        }

    
        /// <summary>
        /// There are no comments for Created in the schema.
        /// </summary>
        [Column(Storage = "_Created", CanBeNull = false, DbType = "datetime NOT NULL", IsPrimaryKey = true)]
        public System.DateTime Created
        {
            get
            {
                return this._Created;
            }
        }

    
        /// <summary>
        /// There are no comments for Latitude in the schema.
        /// </summary>
        [Column(Storage = "_Latitude", CanBeNull = false, DbType = "double NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public double Latitude
        {
            get
            {
                return this._Latitude;
            }
        }

    
        /// <summary>
        /// There are no comments for Longitude in the schema.
        /// </summary>
        [Column(Storage = "_Longitude", CanBeNull = false, DbType = "double NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public double Longitude
        {
            get
            {
                return this._Longitude;
            }
        }

    
        /// <summary>
        /// There are no comments for Altitude in the schema.
        /// </summary>
        [Column(Storage = "_Altitude", DbType = "double NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<double> Altitude
        {
            get
            {
                return this._Altitude;
            }
        }

    
        /// <summary>
        /// There are no comments for Accuracy in the schema.
        /// </summary>
        [Column(Storage = "_Accuracy", DbType = "double NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<double> Accuracy
        {
            get
            {
                return this._Accuracy;
            }
        }

    
        /// <summary>
        /// There are no comments for Humidity in the schema.
        /// </summary>
        [Column(Storage = "_Humidity", DbType = "double NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<double> Humidity
        {
            get
            {
                return this._Humidity;
            }
        }

    
        /// <summary>
        /// There are no comments for AirPressure in the schema.
        /// </summary>
        [Column(Storage = "_AirPressure", DbType = "double NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<double> AirPressure
        {
            get
            {
                return this._AirPressure;
            }
        }

    
        /// <summary>
        /// There are no comments for Temperature in the schema.
        /// </summary>
        [Column(Storage = "_Temperature", DbType = "double NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<double> Temperature
        {
            get
            {
                return this._Temperature;
            }
        }

    
        /// <summary>
        /// There are no comments for LightLevel in the schema.
        /// </summary>
        [Column(Storage = "_LightLevel", DbType = "double NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<double> LightLevel
        {
            get
            {
                return this._LightLevel;
            }
        }

    
        /// <summary>
        /// There are no comments for Charging in the schema.
        /// </summary>
        [Column(Storage = "_Charging", DbType = "tinyint(1) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> Charging
        {
            get
            {
                return this._Charging;
            }
            set
            {
                if (this._Charging != value)
                {
                    this.OnChargingChanging(value);
                    this.SendPropertyChanging();
                    this._Charging = value;
                    this.SendPropertyChanged("Charging");
                    this.OnChargingChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BatteryLevel in the schema.
        /// </summary>
        [Column(Storage = "_BatteryLevel", DbType = "double NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<double> BatteryLevel
        {
            get
            {
                return this._BatteryLevel;
            }
        }

    
        /// <summary>
        /// There are no comments for IPAddressRaw in the schema.
        /// </summary>
        [Column(Name = @"IPAddress", Storage = "_IPAddressRaw", CanBeNull = false, DbType = "bigint NOT NULL", UpdateCheck = UpdateCheck.Never)]
        protected long IPAddressRaw
        {
            get
            {
                return this._IPAddressRaw;
            }
        }

    
        /// <summary>
        /// There are no comments for DBDevice in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DBDevice_DBDeviceState", Storage="_DBDevice", ThisKey="DeviceID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
        internal DBDevice DBDevice
        {
            get
            {
                return this._DBDevice.Entity;
            }
            set
            {
                DBDevice previousValue = this._DBDevice.Entity;
                if ((previousValue != value) || (this._DBDevice.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._DBDevice.Entity = null;
                        previousValue.DBDeviceStates.Remove(this);
                    }
                    this._DBDevice.Entity = value;
                    if (value != null)
                    {
                        this._DeviceID = value.ID;
                        value.DBDeviceStates.Add(this);
                    }
                    else
                    {
                        this._DeviceID = default(long);
                    }
                    this.SendPropertyChanged("DBDevice");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DBUser in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DBUser_DBDeviceState", Storage="_DBUser", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
        internal DBUser DBUser
        {
            get
            {
                return this._DBUser.Entity;
            }
            set
            {
                DBUser previousValue = this._DBUser.Entity;
                if ((previousValue != value) || (this._DBUser.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._DBUser.Entity = null;
                    }
                    this._DBUser.Entity = value;
                    if (value != null)
                    {
                        this._UserID = value.ID;
                    }
                    else
                    {
                        this._UserID = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("DBUser");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for WiFindUs.Eye.Context.DBDevice in the schema.
    /// </summary>
    [Table(Name = @"wfu_eye_db.Devices")]
    public partial class DBDevice : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _ID;

        private System.DateTime _Created = DateTime.Now;

        private string _Type = @"PHO";

        private System.Nullable<long> _WaypointID;
        #pragma warning restore 0649

        private EntitySet<DBDeviceState> _DBDeviceStates;

        private EntityRef<DBWaypoint> _DBAssignedWaypoint;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(long value);
        partial void OnIDChanged();
        partial void OnCreatedChanging(System.DateTime value);
        partial void OnCreatedChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        partial void OnWaypointIDChanging(System.Nullable<long> value);
        partial void OnWaypointIDChanged();
        #endregion

        public DBDevice()
        {
            this._DBDeviceStates = new EntitySet<DBDeviceState>(new Action<DBDeviceState>(this.attach_DBDeviceStates), new Action<DBDeviceState>(this.detach_DBDeviceStates));
            this._DBAssignedWaypoint  = default(EntityRef<DBWaypoint>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        public long ID
        {
            get
            {
                return this._ID;
            }
        }

    
        /// <summary>
        /// There are no comments for Created in the schema.
        /// </summary>
        [Column(Storage = "_Created", CanBeNull = false, DbType = "datetime NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Created
        {
            get
            {
                return this._Created;
            }
        }

    
        /// <summary>
        /// There are no comments for Type in the schema.
        /// </summary>
        [Column(Storage = "_Type", CanBeNull = false, DbType = "varchar(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Type
        {
            get
            {
                return this._Type;
            }
        }

    
        /// <summary>
        /// There are no comments for WaypointID in the schema.
        /// </summary>
        [Column(Storage = "_WaypointID", DbType = "bigint NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> WaypointID
        {
            get
            {
                return this._WaypointID;
            }
            set
            {
                if (this._WaypointID != value)
                {
                    if (this._DBAssignedWaypoint.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnWaypointIDChanging(value);
                    this.SendPropertyChanging();
                    this._WaypointID = value;
                    this.SendPropertyChanged("WaypointID");
                    this.OnWaypointIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DBDeviceStates in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DBDevice_DBDeviceState", Storage="_DBDeviceStates", ThisKey="ID", OtherKey="DeviceID", DeleteRule="CASCADE")]
        internal EntitySet<DBDeviceState> DBDeviceStates
        {
            get
            {
                return this._DBDeviceStates;
            }
            set
            {
                this._DBDeviceStates.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for DBAssignedWaypoint in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DBWaypoint_DBDevice", Storage="_DBAssignedWaypoint", ThisKey="WaypointID", OtherKey="ID", IsForeignKey=true)]
        internal DBWaypoint DBAssignedWaypoint
        {
            get
            {
                return this._DBAssignedWaypoint.Entity;
            }
            set
            {
                DBWaypoint previousValue = this._DBAssignedWaypoint.Entity;
                if ((previousValue != value) || (this._DBAssignedWaypoint.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._DBAssignedWaypoint.Entity = null;
                        previousValue.DBAssignedDevices.Remove(this);
                    }
                    this._DBAssignedWaypoint.Entity = value;
                    if (value != null)
                    {
                        this._WaypointID = value.ID;
                        value.DBAssignedDevices.Add(this);
                    }
                    else
                    {
                        this._WaypointID = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("DBAssignedWaypoint");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_DBDeviceStates(DBDeviceState entity)
        {
            this.SendPropertyChanging("DBDeviceStates");
            entity.DBDevice = this;
        }
    
        private void detach_DBDeviceStates(DBDeviceState entity)
        {
            this.SendPropertyChanging("DBDeviceStates");
            entity.DBDevice = null;
        }
    }

    /// <summary>
    /// There are no comments for WiFindUs.Eye.Context.DBNodeState in the schema.
    /// </summary>
    [Table(Name = @"wfu_eye_db.NodeStates")]
    public partial class DBNodeState : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _NodeID;

        private System.DateTime _Created = DateTime.Now;

        private System.Nullable<double> _Voltage;

        private double _Latitude;

        private double _Longitude;

        private System.Nullable<double> _Altitude;

        private System.Nullable<double> _Accuracy;

        private long _IPAddressRaw = 0;

        private long _Number = 0;
        #pragma warning restore 0649

        private EntityRef<DBNode> _DBNode;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnNodeIDChanging(long value);
        partial void OnNodeIDChanged();
        partial void OnCreatedChanging(System.DateTime value);
        partial void OnCreatedChanged();
        partial void OnVoltageChanging(System.Nullable<double> value);
        partial void OnVoltageChanged();
        partial void OnLatitudeChanging(double value);
        partial void OnLatitudeChanged();
        partial void OnLongitudeChanging(double value);
        partial void OnLongitudeChanged();
        partial void OnAltitudeChanging(System.Nullable<double> value);
        partial void OnAltitudeChanged();
        partial void OnAccuracyChanging(System.Nullable<double> value);
        partial void OnAccuracyChanged();
        partial void OnIPAddressRawChanging(long value);
        partial void OnIPAddressRawChanged();
        partial void OnNumberChanging(long value);
        partial void OnNumberChanged();
        #endregion

        public DBNodeState()
        {
            this._DBNode  = default(EntityRef<DBNode>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for NodeID in the schema.
        /// </summary>
        [Column(Storage = "_NodeID", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        public long NodeID
        {
            get
            {
                return this._NodeID;
            }
        }

    
        /// <summary>
        /// There are no comments for Created in the schema.
        /// </summary>
        [Column(Storage = "_Created", CanBeNull = false, DbType = "datetime NOT NULL", IsPrimaryKey = true)]
        public System.DateTime Created
        {
            get
            {
                return this._Created;
            }
        }

    
        /// <summary>
        /// There are no comments for Voltage in the schema.
        /// </summary>
        [Column(Storage = "_Voltage", DbType = "double NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<double> Voltage
        {
            get
            {
                return this._Voltage;
            }
        }

    
        /// <summary>
        /// There are no comments for Latitude in the schema.
        /// </summary>
        [Column(Storage = "_Latitude", CanBeNull = false, DbType = "double NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public double Latitude
        {
            get
            {
                return this._Latitude;
            }
        }

    
        /// <summary>
        /// There are no comments for Longitude in the schema.
        /// </summary>
        [Column(Storage = "_Longitude", CanBeNull = false, DbType = "double NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public double Longitude
        {
            get
            {
                return this._Longitude;
            }
        }

    
        /// <summary>
        /// There are no comments for Altitude in the schema.
        /// </summary>
        [Column(Storage = "_Altitude", DbType = "double NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<double> Altitude
        {
            get
            {
                return this._Altitude;
            }
        }

    
        /// <summary>
        /// There are no comments for Accuracy in the schema.
        /// </summary>
        [Column(Storage = "_Accuracy", DbType = "double NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<double> Accuracy
        {
            get
            {
                return this._Accuracy;
            }
        }

    
        /// <summary>
        /// There are no comments for IPAddressRaw in the schema.
        /// </summary>
        [Column(Name = @"IPAddress", Storage = "_IPAddressRaw", CanBeNull = false, DbType = "bigint NOT NULL", UpdateCheck = UpdateCheck.Never)]
        protected long IPAddressRaw
        {
            get
            {
                return this._IPAddressRaw;
            }
        }

    
        /// <summary>
        /// There are no comments for Number in the schema.
        /// </summary>
        [Column(Storage = "_Number", CanBeNull = false, DbType = "bigint NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long Number
        {
            get
            {
                return this._Number;
            }
        }

    
        /// <summary>
        /// There are no comments for DBNode in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DBNode_DBNodeState", Storage="_DBNode", ThisKey="NodeID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
        internal DBNode DBNode
        {
            get
            {
                return this._DBNode.Entity;
            }
            set
            {
                DBNode previousValue = this._DBNode.Entity;
                if ((previousValue != value) || (this._DBNode.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._DBNode.Entity = null;
                        previousValue.DBNodeStates.Remove(this);
                    }
                    this._DBNode.Entity = value;
                    if (value != null)
                    {
                        this._NodeID = value.ID;
                        value.DBNodeStates.Add(this);
                    }
                    else
                    {
                        this._NodeID = default(long);
                    }
                    this.SendPropertyChanged("DBNode");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for WiFindUs.Eye.Context.DBNode in the schema.
    /// </summary>
    [Table(Name = @"wfu_eye_db.Nodes")]
    public partial class DBNode : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _ID;

        private System.DateTime _Created = DateTime.Now;
        #pragma warning restore 0649

        private EntitySet<DBNodeState> _DBNodeStates;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(long value);
        partial void OnIDChanged();
        partial void OnCreatedChanging(System.DateTime value);
        partial void OnCreatedChanged();
        #endregion

        public DBNode()
        {
            this._DBNodeStates = new EntitySet<DBNodeState>(new Action<DBNodeState>(this.attach_DBNodeStates), new Action<DBNodeState>(this.detach_DBNodeStates));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        public long ID
        {
            get
            {
                return this._ID;
            }
        }

    
        /// <summary>
        /// There are no comments for Created in the schema.
        /// </summary>
        [Column(Storage = "_Created", CanBeNull = false, DbType = "datetime NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Created
        {
            get
            {
                return this._Created;
            }
        }

    
        /// <summary>
        /// There are no comments for DBNodeStates in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DBNode_DBNodeState", Storage="_DBNodeStates", ThisKey="ID", OtherKey="NodeID", DeleteRule="CASCADE")]
        internal EntitySet<DBNodeState> DBNodeStates
        {
            get
            {
                return this._DBNodeStates;
            }
            set
            {
                this._DBNodeStates.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_DBNodeStates(DBNodeState entity)
        {
            this.SendPropertyChanging("DBNodeStates");
            entity.DBNode = this;
        }
    
        private void detach_DBNodeStates(DBNodeState entity)
        {
            this.SendPropertyChanging("DBNodeStates");
            entity.DBNode = null;
        }
    }

    /// <summary>
    /// There are no comments for WiFindUs.Eye.Context.DBUser in the schema.
    /// </summary>
    [Table(Name = @"wfu_eye_db.Users")]
    public partial class DBUser : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _ID;

        private System.DateTime _Created = DateTime.Now;

        private string _NameFirst;

        private string _NameMiddle;

        private string _NameLast;

        private string _Type;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(long value);
        partial void OnIDChanged();
        partial void OnCreatedChanging(System.DateTime value);
        partial void OnCreatedChanged();
        partial void OnNameFirstChanging(string value);
        partial void OnNameFirstChanged();
        partial void OnNameMiddleChanging(string value);
        partial void OnNameMiddleChanged();
        partial void OnNameLastChanging(string value);
        partial void OnNameLastChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        #endregion

        public DBUser()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "bigint NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long ID
        {
            get
            {
                return this._ID;
            }
        }

    
        /// <summary>
        /// There are no comments for Created in the schema.
        /// </summary>
        [Column(Storage = "_Created", CanBeNull = false, DbType = "datetime NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Created
        {
            get
            {
                return this._Created;
            }
        }

    
        /// <summary>
        /// There are no comments for NameFirst in the schema.
        /// </summary>
        [Column(Storage = "_NameFirst", CanBeNull = false, DbType = "varchar(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string NameFirst
        {
            get
            {
                return this._NameFirst;
            }
            set
            {
                if (this._NameFirst != value)
                {
                    this.OnNameFirstChanging(value);
                    this.SendPropertyChanging();
                    this._NameFirst = value;
                    this.SendPropertyChanged("NameFirst");
                    this.OnNameFirstChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NameMiddle in the schema.
        /// </summary>
        [Column(Storage = "_NameMiddle", CanBeNull = false, DbType = "varchar(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string NameMiddle
        {
            get
            {
                return this._NameMiddle;
            }
            set
            {
                if (this._NameMiddle != value)
                {
                    this.OnNameMiddleChanging(value);
                    this.SendPropertyChanging();
                    this._NameMiddle = value;
                    this.SendPropertyChanged("NameMiddle");
                    this.OnNameMiddleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NameLast in the schema.
        /// </summary>
        [Column(Storage = "_NameLast", CanBeNull = false, DbType = "varchar(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string NameLast
        {
            get
            {
                return this._NameLast;
            }
            set
            {
                if (this._NameLast != value)
                {
                    this.OnNameLastChanging(value);
                    this.SendPropertyChanging();
                    this._NameLast = value;
                    this.SendPropertyChanged("NameLast");
                    this.OnNameLastChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Type in the schema.
        /// </summary>
        [Column(Storage = "_Type", CanBeNull = false, DbType = "varchar(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for WiFindUs.Eye.Context.DBWaypoint in the schema.
    /// </summary>
    [Table(Name = @"wfu_eye_db.Waypoints")]
    public partial class DBWaypoint : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _ID;

        private System.DateTime _Created = DateTime.Now;

        private double _Latitude;

        private double _Longitude;

        private System.Nullable<double> _Altitude;

        private string _Type;

        private string _Category;

        private string _Description;

        private int _Severity = 0;

        private int _Code = 0;

        private System.Nullable<long> _NextWaypointID;

        private System.Nullable<long> _ReportedByID;

        private bool _Archived = false;

        private System.Nullable<System.DateTime> _ArchivedTime;
        #pragma warning restore 0649

        private EntitySet<DBDevice> _DBAssignedDevices;

        private EntityRef<DBUser> _DBReportingUser;

        private EntitySet<DBUser> _DBArchivedResponders;

        private EntityRef<DBWaypoint> _DBNextWaypoint;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(long value);
        partial void OnIDChanged();
        partial void OnCreatedChanging(System.DateTime value);
        partial void OnCreatedChanged();
        partial void OnLatitudeChanging(double value);
        partial void OnLatitudeChanged();
        partial void OnLongitudeChanging(double value);
        partial void OnLongitudeChanged();
        partial void OnAltitudeChanging(System.Nullable<double> value);
        partial void OnAltitudeChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        partial void OnCategoryChanging(string value);
        partial void OnCategoryChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnSeverityChanging(int value);
        partial void OnSeverityChanged();
        partial void OnCodeChanging(int value);
        partial void OnCodeChanged();
        partial void OnNextWaypointIDChanging(System.Nullable<long> value);
        partial void OnNextWaypointIDChanged();
        partial void OnReportedByIDChanging(System.Nullable<long> value);
        partial void OnReportedByIDChanged();
        partial void OnArchivedChanging(bool value);
        partial void OnArchivedChanged();
        partial void OnArchivedTimeChanging(System.Nullable<System.DateTime> value);
        partial void OnArchivedTimeChanged();
        #endregion

        public DBWaypoint()
        {
            this._DBAssignedDevices = new EntitySet<DBDevice>(new Action<DBDevice>(this.attach_DBAssignedDevices), new Action<DBDevice>(this.detach_DBAssignedDevices));
            this._DBReportingUser  = default(EntityRef<DBUser>);
            this._DBArchivedResponders = new EntitySet<DBUser>(new Action<DBUser>(this.attach_DBArchivedResponders), new Action<DBUser>(this.detach_DBArchivedResponders));
            this._DBNextWaypoint  = default(EntityRef<DBWaypoint>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "bigint NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long ID
        {
            get
            {
                return this._ID;
            }
        }

    
        /// <summary>
        /// There are no comments for Created in the schema.
        /// </summary>
        [Column(Storage = "_Created", CanBeNull = false, DbType = "datetime NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Created
        {
            get
            {
                return this._Created;
            }
        }

    
        /// <summary>
        /// There are no comments for Latitude in the schema.
        /// </summary>
        [Column(Storage = "_Latitude", CanBeNull = false, DbType = "double NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public double Latitude
        {
            get
            {
                return this._Latitude;
            }
        }

    
        /// <summary>
        /// There are no comments for Longitude in the schema.
        /// </summary>
        [Column(Storage = "_Longitude", CanBeNull = false, DbType = "double NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public double Longitude
        {
            get
            {
                return this._Longitude;
            }
        }

    
        /// <summary>
        /// There are no comments for Altitude in the schema.
        /// </summary>
        [Column(Storage = "_Altitude", DbType = "double NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<double> Altitude
        {
            get
            {
                return this._Altitude;
            }
        }

    
        /// <summary>
        /// There are no comments for Type in the schema.
        /// </summary>
        [Column(Storage = "_Type", CanBeNull = false, DbType = "varchar(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Category in the schema.
        /// </summary>
        [Column(Storage = "_Category", CanBeNull = false, DbType = "varchar(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Category
        {
            get
            {
                return this._Category;
            }
            set
            {
                if (this._Category != value)
                {
                    this.OnCategoryChanging(value);
                    this.SendPropertyChanging();
                    this._Category = value;
                    this.SendPropertyChanged("Category");
                    this.OnCategoryChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Storage = "_Description", CanBeNull = false, DbType = "text NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Severity in the schema.
        /// </summary>
        [Column(Storage = "_Severity", CanBeNull = false, DbType = "int(9) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Severity
        {
            get
            {
                return this._Severity;
            }
            set
            {
                if (this._Severity != value)
                {
                    this.OnSeverityChanging(value);
                    this.SendPropertyChanging();
                    this._Severity = value;
                    this.SendPropertyChanged("Severity");
                    this.OnSeverityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Code in the schema.
        /// </summary>
        [Column(Storage = "_Code", CanBeNull = false, DbType = "int(9) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if (this._Code != value)
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NextWaypointID in the schema.
        /// </summary>
        [Column(Storage = "_NextWaypointID", DbType = "bigint NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> NextWaypointID
        {
            get
            {
                return this._NextWaypointID;
            }
            set
            {
                if (this._NextWaypointID != value)
                {
                    if (this._DBNextWaypoint.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnNextWaypointIDChanging(value);
                    this.SendPropertyChanging();
                    this._NextWaypointID = value;
                    this.SendPropertyChanged("NextWaypointID");
                    this.OnNextWaypointIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReportedByID in the schema.
        /// </summary>
        [Column(Storage = "_ReportedByID", DbType = "bigint NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> ReportedByID
        {
            get
            {
                return this._ReportedByID;
            }
            set
            {
                if (this._ReportedByID != value)
                {
                    if (this._DBReportingUser.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnReportedByIDChanging(value);
                    this.SendPropertyChanging();
                    this._ReportedByID = value;
                    this.SendPropertyChanged("ReportedByID");
                    this.OnReportedByIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Archived in the schema.
        /// </summary>
        [Column(Storage = "_Archived", CanBeNull = false, DbType = "tinyint(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Archived
        {
            get
            {
                return this._Archived;
            }
            set
            {
                if (this._Archived != value)
                {
                    this.OnArchivedChanging(value);
                    this.SendPropertyChanging();
                    this._Archived = value;
                    this.SendPropertyChanged("Archived");
                    this.OnArchivedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ArchivedTime in the schema.
        /// </summary>
        [Column(Storage = "_ArchivedTime", DbType = "datetime NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> ArchivedTime
        {
            get
            {
                return this._ArchivedTime;
            }
            set
            {
                if (this._ArchivedTime != value)
                {
                    this.OnArchivedTimeChanging(value);
                    this.SendPropertyChanging();
                    this._ArchivedTime = value;
                    this.SendPropertyChanged("ArchivedTime");
                    this.OnArchivedTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DBAssignedDevices in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DBWaypoint_DBDevice", Storage="_DBAssignedDevices", ThisKey="ID", OtherKey="WaypointID", DeleteRule="SET NULL")]
        internal EntitySet<DBDevice> DBAssignedDevices
        {
            get
            {
                return this._DBAssignedDevices;
            }
            set
            {
                this._DBAssignedDevices.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for DBReportingUser in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DBUser_DBWaypoint", Storage="_DBReportingUser", ThisKey="ReportedByID", OtherKey="ID", IsForeignKey=true)]
        internal DBUser DBReportingUser
        {
            get
            {
                return this._DBReportingUser.Entity;
            }
            set
            {
                DBUser previousValue = this._DBReportingUser.Entity;
                if ((previousValue != value) || (this._DBReportingUser.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._DBReportingUser.Entity = null;
                    }
                    this._DBReportingUser.Entity = value;
                    if (value != null)
                    {
                        this._ReportedByID = value.ID;
                    }
                    else
                    {
                        this._ReportedByID = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("DBReportingUser");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DBArchivedResponders in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DBWaypoint_DBUser", Storage="_DBArchivedResponders", ThisKey="ID", OtherKey="ID", LinkTableName=@"wfu_eye_db.ArchivedWaypointResponders", LinkThisKey=@"WaypointID", LinkOtherKey=@"UserID")]
        internal EntitySet<DBUser> DBArchivedResponders
        {
            get
            {
                return this._DBArchivedResponders;
            }
            set
            {
                this._DBArchivedResponders.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for DBNextWaypoint in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DBWaypoint_DBWaypoint", Storage="_DBNextWaypoint", ThisKey="NextWaypointID", OtherKey="ID", IsForeignKey=true)]
        internal DBWaypoint DBNextWaypoint
        {
            get
            {
                return this._DBNextWaypoint.Entity;
            }
            set
            {
                DBWaypoint previousValue = this._DBNextWaypoint.Entity;
                if ((previousValue != value) || (this._DBNextWaypoint.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._DBNextWaypoint.Entity = null;
                    }
                    this._DBNextWaypoint.Entity = value;
                    if (value != null)
                    {
                        this._NextWaypointID = value.ID;
                    }
                    else
                    {
                        this._NextWaypointID = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("DBNextWaypoint");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_DBAssignedDevices(DBDevice entity)
        {
            this.SendPropertyChanging("DBAssignedDevices");
            entity.DBAssignedWaypoint = this;
        }
    
        private void detach_DBAssignedDevices(DBDevice entity)
        {
            this.SendPropertyChanging("DBAssignedDevices");
            entity.DBAssignedWaypoint = null;
        }

        private void attach_DBArchivedResponders(DBUser entity)
        {
            this.SendPropertyChanging("DBArchivedResponders");
        }
    
        private void detach_DBArchivedResponders(DBUser entity)
        {
            this.SendPropertyChanging("DBArchivedResponders");
        }
    }

}
