//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 25/11/2014 2:25:54 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace WiFindUs.Eye
{

    /// <summary>
    /// There are no comments for WiFindUs.Eye.NodeState in the schema.
    /// </summary>
    [Table(Name = @"wfu_eye_db.NodeStates")]
    public partial class NodeState : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _NodeID;

        private System.DateTime _Created = DateTime.Now;

        private System.Nullable<double> _Voltage;

        private double _Latitude;

        private double _Longitude;

        private System.Nullable<double> _Altitude;

        private System.Nullable<double> _Accuracy;

        private long _IPAddressRaw = 0;

        private long _Number = 0;
        #pragma warning restore 0649

        private EntityRef<Node> _Node;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnNodeIDChanging(long value);
        partial void OnNodeIDChanged();
        partial void OnCreatedChanging(System.DateTime value);
        partial void OnCreatedChanged();
        partial void OnVoltageChanging(System.Nullable<double> value);
        partial void OnVoltageChanged();
        partial void OnLatitudeChanging(double value);
        partial void OnLatitudeChanged();
        partial void OnLongitudeChanging(double value);
        partial void OnLongitudeChanged();
        partial void OnAltitudeChanging(System.Nullable<double> value);
        partial void OnAltitudeChanged();
        partial void OnAccuracyChanging(System.Nullable<double> value);
        partial void OnAccuracyChanged();
        partial void OnIPAddressRawChanging(long value);
        partial void OnIPAddressRawChanged();
        partial void OnNumberChanging(long value);
        partial void OnNumberChanged();
        #endregion

        public NodeState()
        {
            this._Node  = default(EntityRef<Node>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for NodeID in the schema.
        /// </summary>
        [Column(Storage = "_NodeID", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        protected long NodeID
        {
            get
            {
                return this._NodeID;
            }
        }

    
        /// <summary>
        /// There are no comments for Created in the schema.
        /// </summary>
        [Column(Storage = "_Created", CanBeNull = false, DbType = "datetime NOT NULL", IsPrimaryKey = true)]
        public System.DateTime Created
        {
            get
            {
                return this._Created;
            }
        }

    
        /// <summary>
        /// There are no comments for Voltage in the schema.
        /// </summary>
        [Column(Storage = "_Voltage", DbType = "double NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<double> Voltage
        {
            get
            {
                return this._Voltage;
            }
        }

    
        /// <summary>
        /// There are no comments for Latitude in the schema.
        /// </summary>
        [Column(Storage = "_Latitude", CanBeNull = false, DbType = "double NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public double Latitude
        {
            get
            {
                return this._Latitude;
            }
        }

    
        /// <summary>
        /// There are no comments for Longitude in the schema.
        /// </summary>
        [Column(Storage = "_Longitude", CanBeNull = false, DbType = "double NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public double Longitude
        {
            get
            {
                return this._Longitude;
            }
        }

    
        /// <summary>
        /// There are no comments for Altitude in the schema.
        /// </summary>
        [Column(Storage = "_Altitude", DbType = "double NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<double> Altitude
        {
            get
            {
                return this._Altitude;
            }
        }

    
        /// <summary>
        /// There are no comments for Accuracy in the schema.
        /// </summary>
        [Column(Storage = "_Accuracy", DbType = "double NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<double> Accuracy
        {
            get
            {
                return this._Accuracy;
            }
        }

    
        /// <summary>
        /// There are no comments for IPAddressRaw in the schema.
        /// </summary>
        [Column(Name = @"IPAddress", Storage = "_IPAddressRaw", CanBeNull = false, DbType = "bigint NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long IPAddressRaw
        {
            get
            {
                return this._IPAddressRaw;
            }
        }

    
        /// <summary>
        /// There are no comments for Number in the schema.
        /// </summary>
        [Column(Storage = "_Number", CanBeNull = false, DbType = "bigint NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long Number
        {
            get
            {
                return this._Number;
            }
        }

    
        /// <summary>
        /// There are no comments for Node in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Node_NodeState", Storage="_Node", ThisKey="NodeID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
        public Node Node
        {
            get
            {
                return this._Node.Entity;
            }
            set
            {
                Node previousValue = this._Node.Entity;
                if ((previousValue != value) || (this._Node.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Node.Entity = null;
                        previousValue.NodeStates.Remove(this);
                    }
                    this._Node.Entity = value;
                    if (value != null)
                    {
                        this._NodeID = value.ID;
                        value.NodeStates.Add(this);
                    }
                    else
                    {
                        this._NodeID = default(long);
                    }
                    this.SendPropertyChanged("Node");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
