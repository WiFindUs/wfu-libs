//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 21/11/2014 5:18:48 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace WiFindUs.Eye
{

    [DatabaseAttribute(Name = "wfu_eye_db")]
    [ProviderAttribute(typeof(Devart.Data.MySql.Linq.Provider.MySqlDataProvider))]
    public partial class EyeContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(EyeContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertDeviceAtmosphere(DeviceAtmosphere instance);
        partial void UpdateDeviceAtmosphere(DeviceAtmosphere instance);
        partial void DeleteDeviceAtmosphere(DeviceAtmosphere instance);
        partial void InsertDeviceLocation(DeviceLocation instance);
        partial void UpdateDeviceLocation(DeviceLocation instance);
        partial void DeleteDeviceLocation(DeviceLocation instance);
        partial void InsertDevice(Device instance);
        partial void UpdateDevice(Device instance);
        partial void DeleteDevice(Device instance);
        partial void InsertNodeLocation(NodeLocation instance);
        partial void UpdateNodeLocation(NodeLocation instance);
        partial void DeleteNodeLocation(NodeLocation instance);
        partial void InsertNode(Node instance);
        partial void UpdateNode(Node instance);
        partial void DeleteNode(Node instance);
        partial void InsertUser(User instance);
        partial void UpdateUser(User instance);
        partial void DeleteUser(User instance);
        partial void InsertWaypoint(Waypoint instance);
        partial void UpdateWaypoint(Waypoint instance);
        partial void DeleteWaypoint(Waypoint instance);

        #endregion

        public EyeContext() :
        base(@"User Id=root;Password=omgwtflol87;Host=192.168.1.1;Database=wfu_eye_db;Persist Security Info=True", mappingSource)
        {
            OnCreated();
        }

        public EyeContext(MappingSource mappingSource) :
        base(@"User Id=root;Password=omgwtflol87;Host=192.168.1.1;Database=wfu_eye_db;Persist Security Info=True", mappingSource)
        {
            OnCreated();
        }

        public EyeContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public EyeContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public EyeContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public EyeContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<DeviceAtmosphere> DeviceAtmospheres
        {
            get
            {
                return this.GetTable<DeviceAtmosphere>();
            }
        }

        public Devart.Data.Linq.Table<DeviceLocation> DeviceLocations
        {
            get
            {
                return this.GetTable<DeviceLocation>();
            }
        }

        public Devart.Data.Linq.Table<Device> Devices
        {
            get
            {
                return this.GetTable<Device>();
            }
        }

        public Devart.Data.Linq.Table<NodeLocation> NodeLocations
        {
            get
            {
                return this.GetTable<NodeLocation>();
            }
        }

        public Devart.Data.Linq.Table<Node> Nodes
        {
            get
            {
                return this.GetTable<Node>();
            }
        }

        public Devart.Data.Linq.Table<User> Users
        {
            get
            {
                return this.GetTable<User>();
            }
        }

        public Devart.Data.Linq.Table<Waypoint> Waypoints
        {
            get
            {
                return this.GetTable<Waypoint>();
            }
        }
    }
}

namespace WiFindUs.Eye
{

    /// <summary>
    /// There are no comments for WiFindUs.Eye.DeviceAtmosphere in the schema.
    /// </summary>
    [Table(Name = @"wfu_eye_db.deviceatmospheres")]
    public partial class DeviceAtmosphere : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _DeviceID;

        private System.DateTime _Created = DateTime.Now;

        private System.Nullable<double> _Humidity;

        private System.Nullable<double> _AirPressure;

        private System.Nullable<double> _Temperature;

        private System.Nullable<double> _LightLevel;
        #pragma warning restore 0649

        private EntityRef<Device> _Device;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnDeviceIDChanging(long value);
        partial void OnDeviceIDChanged();
        partial void OnCreatedChanging(System.DateTime value);
        partial void OnCreatedChanged();
        partial void OnHumidityChanging(System.Nullable<double> value);
        partial void OnHumidityChanged();
        partial void OnAirPressureChanging(System.Nullable<double> value);
        partial void OnAirPressureChanged();
        partial void OnTemperatureChanging(System.Nullable<double> value);
        partial void OnTemperatureChanged();
        partial void OnLightLevelChanging(System.Nullable<double> value);
        partial void OnLightLevelChanged();
        #endregion

        public DeviceAtmosphere()
        {
            this._Device  = default(EntityRef<Device>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DeviceID in the schema.
        /// </summary>
        [Column(Storage = "_DeviceID", CanBeNull = false, DbType = "INT(9) UNSIGNED NOT NULL", IsPrimaryKey = true)]
        public long DeviceID
        {
            get
            {
                return this._DeviceID;
            }
        }

    
        /// <summary>
        /// There are no comments for Created in the schema.
        /// </summary>
        [Column(Storage = "_Created", CanBeNull = false, DbType = "DATETIME NOT NULL", IsPrimaryKey = true)]
        public System.DateTime Created
        {
            get
            {
                return this._Created;
            }
        }

    
        /// <summary>
        /// There are no comments for Humidity in the schema.
        /// </summary>
        [Column(Storage = "_Humidity", DbType = "DOUBLE", UpdateCheck = UpdateCheck.Never)]
        public override System.Nullable<double> Humidity
        {
            get
            {
                return this._Humidity;
            }
        }

    
        /// <summary>
        /// There are no comments for AirPressure in the schema.
        /// </summary>
        [Column(Storage = "_AirPressure", DbType = "DOUBLE", UpdateCheck = UpdateCheck.Never)]
        public override System.Nullable<double> AirPressure
        {
            get
            {
                return this._AirPressure;
            }
        }

    
        /// <summary>
        /// There are no comments for Temperature in the schema.
        /// </summary>
        [Column(Storage = "_Temperature", DbType = "DOUBLE", UpdateCheck = UpdateCheck.Never)]
        public override System.Nullable<double> Temperature
        {
            get
            {
                return this._Temperature;
            }
        }

    
        /// <summary>
        /// There are no comments for LightLevel in the schema.
        /// </summary>
        [Column(Storage = "_LightLevel", DbType = "DOUBLE", UpdateCheck = UpdateCheck.Never)]
        public override System.Nullable<double> LightLevel
        {
            get
            {
                return this._LightLevel;
            }
        }

    
        /// <summary>
        /// There are no comments for Device in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Device_DeviceAtmosphere", Storage="_Device", ThisKey="DeviceID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
        public Device Device
        {
            get
            {
                return this._Device.Entity;
            }
            set
            {
                Device previousValue = this._Device.Entity;
                if ((previousValue != value) || (this._Device.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Device.Entity = null;
                        previousValue.Atmospheres.Remove(this);
                    }
                    this._Device.Entity = value;
                    if (value != null)
                    {
                        this._DeviceID = value.ID;
                        value.Atmospheres.Add(this);
                    }
                    else
                    {
                        this._DeviceID = default(long);
                    }
                    this.SendPropertyChanged("Device");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for WiFindUs.Eye.DeviceLocation in the schema.
    /// </summary>
    [Table(Name = @"wfu_eye_db.devicelocations")]
    public partial class DeviceLocation : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _DeviceID;

        private System.DateTime _Created = DateTime.Now;

        private double _Latitude;

        private double _Longitude;

        private System.Nullable<double> _Altitude;

        private System.Nullable<double> _Accuracy;
        #pragma warning restore 0649

        private EntityRef<Device> _Device;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnDeviceIDChanging(long value);
        partial void OnDeviceIDChanged();
        partial void OnCreatedChanging(System.DateTime value);
        partial void OnCreatedChanged();
        partial void OnLatitudeChanging(double value);
        partial void OnLatitudeChanged();
        partial void OnLongitudeChanging(double value);
        partial void OnLongitudeChanged();
        partial void OnAltitudeChanging(System.Nullable<double> value);
        partial void OnAltitudeChanged();
        partial void OnAccuracyChanging(System.Nullable<double> value);
        partial void OnAccuracyChanged();
        #endregion

        public DeviceLocation()
        {
            this._Device  = default(EntityRef<Device>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DeviceID in the schema.
        /// </summary>
        [Column(Storage = "_DeviceID", CanBeNull = false, DbType = "INT(9) UNSIGNED NOT NULL", IsPrimaryKey = true)]
        public long DeviceID
        {
            get
            {
                return this._DeviceID;
            }
        }

    
        /// <summary>
        /// There are no comments for Created in the schema.
        /// </summary>
        [Column(Storage = "_Created", CanBeNull = false, DbType = "DATETIME NOT NULL", IsPrimaryKey = true)]
        public System.DateTime Created
        {
            get
            {
                return this._Created;
            }
        }

    
        /// <summary>
        /// There are no comments for Latitude in the schema.
        /// </summary>
        [Column(Storage = "_Latitude", CanBeNull = false, DbType = "DOUBLE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public override double Latitude
        {
            get
            {
                return this._Latitude;
            }
        }

    
        /// <summary>
        /// There are no comments for Longitude in the schema.
        /// </summary>
        [Column(Storage = "_Longitude", CanBeNull = false, DbType = "DOUBLE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public override double Longitude
        {
            get
            {
                return this._Longitude;
            }
        }

    
        /// <summary>
        /// There are no comments for Altitude in the schema.
        /// </summary>
        [Column(Storage = "_Altitude", DbType = "DOUBLE", UpdateCheck = UpdateCheck.Never)]
        public override System.Nullable<double> Altitude
        {
            get
            {
                return this._Altitude;
            }
        }

    
        /// <summary>
        /// There are no comments for Accuracy in the schema.
        /// </summary>
        [Column(Storage = "_Accuracy", DbType = "DOUBLE", UpdateCheck = UpdateCheck.Never)]
        public override System.Nullable<double> Accuracy
        {
            get
            {
                return this._Accuracy;
            }
        }

    
        /// <summary>
        /// There are no comments for Device in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Device_DeviceLocation", Storage="_Device", ThisKey="DeviceID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
        public Device Device
        {
            get
            {
                return this._Device.Entity;
            }
            set
            {
                Device previousValue = this._Device.Entity;
                if ((previousValue != value) || (this._Device.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Device.Entity = null;
                        previousValue.Locations.Remove(this);
                    }
                    this._Device.Entity = value;
                    if (value != null)
                    {
                        this._DeviceID = value.ID;
                        value.Locations.Add(this);
                    }
                    else
                    {
                        this._DeviceID = default(long);
                    }
                    this.SendPropertyChanged("Device");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for WiFindUs.Eye.Device in the schema.
    /// </summary>
    [Table(Name = @"wfu_eye_db.devices")]
    public partial class Device : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _ID;

        private System.DateTime _Created = DateTime.Now;

        private System.DateTime _Updated = DateTime.Now;

        private string _Type = @"PHO";

        private long _IPAddressRaw = 0;

        private System.Nullable<long> _UserID;

        private System.Nullable<long> _WaypointID;
        #pragma warning restore 0649

        private EntitySet<DeviceAtmosphere> _Atmospheres;

        private EntitySet<DeviceLocation> _Locations;

        private EntityRef<Waypoint> _AssignedWaypoint;

        private EntityRef<User> _CurrentUser;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(long value);
        partial void OnIDChanged();
        partial void OnCreatedChanging(System.DateTime value);
        partial void OnCreatedChanged();
        partial void OnUpdatedChanging(System.DateTime value);
        partial void OnUpdatedChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        partial void OnIPAddressRawChanging(long value);
        partial void OnIPAddressRawChanged();
        partial void OnUserIDChanging(System.Nullable<long> value);
        partial void OnUserIDChanged();
        partial void OnWaypointIDChanging(System.Nullable<long> value);
        partial void OnWaypointIDChanged();
        #endregion

        public Device()
        {
            this._Atmospheres = new EntitySet<DeviceAtmosphere>(new Action<DeviceAtmosphere>(this.attach_Atmospheres), new Action<DeviceAtmosphere>(this.detach_Atmospheres));
            this._Locations = new EntitySet<DeviceLocation>(new Action<DeviceLocation>(this.attach_Locations), new Action<DeviceLocation>(this.detach_Locations));
            this._AssignedWaypoint  = default(EntityRef<Waypoint>);
            this._CurrentUser  = default(EntityRef<User>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "INT(9) UNSIGNED NOT NULL", IsPrimaryKey = true)]
        public long ID
        {
            get
            {
                return this._ID;
            }
        }

    
        /// <summary>
        /// There are no comments for Created in the schema.
        /// </summary>
        [Column(Storage = "_Created", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Created
        {
            get
            {
                return this._Created;
            }
        }

    
        /// <summary>
        /// There are no comments for Updated in the schema.
        /// </summary>
        [Column(Storage = "_Updated", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Updated
        {
            get
            {
                return this._Updated;
            }
        }

    
        /// <summary>
        /// There are no comments for Type in the schema.
        /// </summary>
        [Column(Storage = "_Type", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Type
        {
            get
            {
                return this._Type;
            }
        }

    
        /// <summary>
        /// There are no comments for IPAddressRaw in the schema.
        /// </summary>
        [Column(Name = @"IPAddress", Storage = "_IPAddressRaw", CanBeNull = false, DbType = "INT(9) UNSIGNED NOT NULL", UpdateCheck = UpdateCheck.Never)]
        protected long IPAddressRaw
        {
            get
            {
                return this._IPAddressRaw;
            }
        }

    
        /// <summary>
        /// There are no comments for UserID in the schema.
        /// </summary>
        [Column(Storage = "_UserID", DbType = "INT(9) UNSIGNED NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> UserID
        {
            get
            {
                return this._UserID;
            }
        }

    
        /// <summary>
        /// There are no comments for WaypointID in the schema.
        /// </summary>
        [Column(Storage = "_WaypointID", DbType = "INT(9) UNSIGNED NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> WaypointID
        {
            get
            {
                return this._WaypointID;
            }
            set
            {
                if (this._WaypointID != value)
                {
                    if (this._AssignedWaypoint.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnWaypointIDChanging(value);
                    this.SendPropertyChanging();
                    this._WaypointID = value;
                    this.SendPropertyChanged("WaypointID");
                    this.OnWaypointIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Atmospheres in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Device_DeviceAtmosphere", Storage="_Atmospheres", ThisKey="ID", OtherKey="DeviceID", DeleteRule="CASCADE")]
        public EntitySet<DeviceAtmosphere> Atmospheres
        {
            get
            {
                return this._Atmospheres;
            }
            set
            {
                this._Atmospheres.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Locations in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Device_DeviceLocation", Storage="_Locations", ThisKey="ID", OtherKey="DeviceID", DeleteRule="CASCADE")]
        public EntitySet<DeviceLocation> Locations
        {
            get
            {
                return this._Locations;
            }
            set
            {
                this._Locations.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for AssignedWaypoint in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Waypoint_Device", Storage="_AssignedWaypoint", ThisKey="WaypointID", OtherKey="ID", IsForeignKey=true)]
        public Waypoint AssignedWaypoint
        {
            get
            {
                return this._AssignedWaypoint.Entity;
            }
            set
            {
                Waypoint previousValue = this._AssignedWaypoint.Entity;
                if ((previousValue != value) || (this._AssignedWaypoint.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._AssignedWaypoint.Entity = null;
                        previousValue.AssignedDevices.Remove(this);
                    }
                    this._AssignedWaypoint.Entity = value;
                    if (value != null)
                    {
                        this._WaypointID = value.ID;
                        value.AssignedDevices.Add(this);
                    }
                    else
                    {
                        this._WaypointID = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("AssignedWaypoint");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CurrentUser in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User_Device", Storage="_CurrentUser", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
        public User CurrentUser
        {
            get
            {
                return this._CurrentUser.Entity;
            }
            set
            {
                User previousValue = this._CurrentUser.Entity;
                if ((previousValue != value) || (this._CurrentUser.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CurrentUser.Entity = null;
                        previousValue.CurrentDevice.Remove(this);
                    }
                    this._CurrentUser.Entity = value;
                    if (value != null)
                    {
                        this._UserID = value.ID;
                        value.CurrentDevice.Add(this);
                    }
                    else
                    {
                        this._UserID = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("CurrentUser");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Atmospheres(DeviceAtmosphere entity)
        {
            this.SendPropertyChanging("Atmospheres");
            entity.Device = this;
        }
    
        private void detach_Atmospheres(DeviceAtmosphere entity)
        {
            this.SendPropertyChanging("Atmospheres");
            entity.Device = null;
        }

        private void attach_Locations(DeviceLocation entity)
        {
            this.SendPropertyChanging("Locations");
            entity.Device = this;
        }
    
        private void detach_Locations(DeviceLocation entity)
        {
            this.SendPropertyChanging("Locations");
            entity.Device = null;
        }
    }

    /// <summary>
    /// There are no comments for WiFindUs.Eye.NodeLocation in the schema.
    /// </summary>
    [Table(Name = @"wfu_eye_db.nodelocations")]
    public partial class NodeLocation : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _NodeID;

        private System.DateTime _Created = DateTime.Now;

        private double _Latitude;

        private double _Longitude;

        private System.Nullable<double> _Altitude;

        private System.Nullable<double> _Accuracy;
        #pragma warning restore 0649

        private EntityRef<Node> _Node;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnNodeIDChanging(long value);
        partial void OnNodeIDChanged();
        partial void OnCreatedChanging(System.DateTime value);
        partial void OnCreatedChanged();
        partial void OnLatitudeChanging(double value);
        partial void OnLatitudeChanged();
        partial void OnLongitudeChanging(double value);
        partial void OnLongitudeChanged();
        partial void OnAltitudeChanging(System.Nullable<double> value);
        partial void OnAltitudeChanged();
        partial void OnAccuracyChanging(System.Nullable<double> value);
        partial void OnAccuracyChanged();
        #endregion

        public NodeLocation()
        {
            this._Node  = default(EntityRef<Node>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for NodeID in the schema.
        /// </summary>
        [Column(Storage = "_NodeID", CanBeNull = false, DbType = "INT(9) UNSIGNED NOT NULL", IsPrimaryKey = true)]
        public long NodeID
        {
            get
            {
                return this._NodeID;
            }
        }

    
        /// <summary>
        /// There are no comments for Created in the schema.
        /// </summary>
        [Column(Storage = "_Created", CanBeNull = false, DbType = "DATETIME NOT NULL", IsPrimaryKey = true)]
        public System.DateTime Created
        {
            get
            {
                return this._Created;
            }
        }

    
        /// <summary>
        /// There are no comments for Latitude in the schema.
        /// </summary>
        [Column(Storage = "_Latitude", CanBeNull = false, DbType = "DOUBLE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public override double Latitude
        {
            get
            {
                return this._Latitude;
            }
        }

    
        /// <summary>
        /// There are no comments for Longitude in the schema.
        /// </summary>
        [Column(Storage = "_Longitude", CanBeNull = false, DbType = "DOUBLE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public override double Longitude
        {
            get
            {
                return this._Longitude;
            }
        }

    
        /// <summary>
        /// There are no comments for Altitude in the schema.
        /// </summary>
        [Column(Storage = "_Altitude", DbType = "DOUBLE", UpdateCheck = UpdateCheck.Never)]
        public override System.Nullable<double> Altitude
        {
            get
            {
                return this._Altitude;
            }
        }

    
        /// <summary>
        /// There are no comments for Accuracy in the schema.
        /// </summary>
        [Column(Storage = "_Accuracy", DbType = "DOUBLE", UpdateCheck = UpdateCheck.Never)]
        public override System.Nullable<double> Accuracy
        {
            get
            {
                return this._Accuracy;
            }
        }

    
        /// <summary>
        /// There are no comments for Node in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Node_NodeLocation", Storage="_Node", ThisKey="NodeID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
        public Node Node
        {
            get
            {
                return this._Node.Entity;
            }
            set
            {
                Node previousValue = this._Node.Entity;
                if ((previousValue != value) || (this._Node.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Node.Entity = null;
                        previousValue.Locations.Remove(this);
                    }
                    this._Node.Entity = value;
                    if (value != null)
                    {
                        this._NodeID = value.ID;
                        value.Locations.Add(this);
                    }
                    else
                    {
                        this._NodeID = default(long);
                    }
                    this.SendPropertyChanged("Node");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for WiFindUs.Eye.Node in the schema.
    /// </summary>
    [Table(Name = @"wfu_eye_db.nodes")]
    public partial class Node : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _ID;

        private System.DateTime _Created = DateTime.Now;

        private System.DateTime _Updated = DateTime.Now;

        private long _IPAddressRaw = 0;

        private long _Number = 0;
        #pragma warning restore 0649

        private EntitySet<NodeLocation> _Locations;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(long value);
        partial void OnIDChanged();
        partial void OnCreatedChanging(System.DateTime value);
        partial void OnCreatedChanged();
        partial void OnUpdatedChanging(System.DateTime value);
        partial void OnUpdatedChanged();
        partial void OnIPAddressRawChanging(long value);
        partial void OnIPAddressRawChanged();
        partial void OnNumberChanging(long value);
        partial void OnNumberChanged();
        #endregion

        public Node()
        {
            this._Locations = new EntitySet<NodeLocation>(new Action<NodeLocation>(this.attach_Locations), new Action<NodeLocation>(this.detach_Locations));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "INT(9) UNSIGNED NOT NULL", IsPrimaryKey = true)]
        public long ID
        {
            get
            {
                return this._ID;
            }
        }

    
        /// <summary>
        /// There are no comments for Created in the schema.
        /// </summary>
        [Column(Storage = "_Created", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Created
        {
            get
            {
                return this._Created;
            }
        }

    
        /// <summary>
        /// There are no comments for Updated in the schema.
        /// </summary>
        [Column(Storage = "_Updated", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Updated
        {
            get
            {
                return this._Updated;
            }
        }

    
        /// <summary>
        /// There are no comments for IPAddressRaw in the schema.
        /// </summary>
        [Column(Name = @"IPAddress", Storage = "_IPAddressRaw", CanBeNull = false, DbType = "INT(9) UNSIGNED NOT NULL", UpdateCheck = UpdateCheck.Never)]
        protected long IPAddressRaw
        {
            get
            {
                return this._IPAddressRaw;
            }
        }

    
        /// <summary>
        /// There are no comments for Number in the schema.
        /// </summary>
        [Column(Storage = "_Number", CanBeNull = false, DbType = "INT(9) UNSIGNED NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long Number
        {
            get
            {
                return this._Number;
            }
        }

    
        /// <summary>
        /// There are no comments for Locations in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Node_NodeLocation", Storage="_Locations", ThisKey="ID", OtherKey="NodeID", DeleteRule="CASCADE")]
        public EntitySet<NodeLocation> Locations
        {
            get
            {
                return this._Locations;
            }
            set
            {
                this._Locations.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Locations(NodeLocation entity)
        {
            this.SendPropertyChanging("Locations");
            entity.Node = this;
        }
    
        private void detach_Locations(NodeLocation entity)
        {
            this.SendPropertyChanging("Locations");
            entity.Node = null;
        }
    }

    /// <summary>
    /// There are no comments for WiFindUs.Eye.User in the schema.
    /// </summary>
    [Table(Name = @"wfu_eye_db.users")]
    public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _ID;

        private System.DateTime _Created = DateTime.Now;

        private string _NameFirst;

        private string _NameMiddle;

        private string _NameLast;

        private string _Type;
        #pragma warning restore 0649

        private EntitySet<Device> _CurrentDevice;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(long value);
        partial void OnIDChanged();
        partial void OnCreatedChanging(System.DateTime value);
        partial void OnCreatedChanged();
        partial void OnNameFirstChanging(string value);
        partial void OnNameFirstChanged();
        partial void OnNameMiddleChanging(string value);
        partial void OnNameMiddleChanged();
        partial void OnNameLastChanging(string value);
        partial void OnNameLastChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        #endregion

        public User()
        {
            this._CurrentDevice = new EntitySet<Device>(new Action<Device>(this.attach_CurrentDevice), new Action<Device>(this.detach_CurrentDevice));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(9) UNSIGNED NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long ID
        {
            get
            {
                return this._ID;
            }
        }

    
        /// <summary>
        /// There are no comments for Created in the schema.
        /// </summary>
        [Column(Storage = "_Created", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Created
        {
            get
            {
                return this._Created;
            }
        }

    
        /// <summary>
        /// There are no comments for NameFirst in the schema.
        /// </summary>
        [Column(Storage = "_NameFirst", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string NameFirst
        {
            get
            {
                return this._NameFirst;
            }
            set
            {
                if (this._NameFirst != value)
                {
                    this.OnNameFirstChanging(value);
                    this.SendPropertyChanging();
                    this._NameFirst = value;
                    this.SendPropertyChanged("NameFirst");
                    this.OnNameFirstChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NameMiddle in the schema.
        /// </summary>
        [Column(Storage = "_NameMiddle", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string NameMiddle
        {
            get
            {
                return this._NameMiddle;
            }
            set
            {
                if (this._NameMiddle != value)
                {
                    this.OnNameMiddleChanging(value);
                    this.SendPropertyChanging();
                    this._NameMiddle = value;
                    this.SendPropertyChanged("NameMiddle");
                    this.OnNameMiddleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NameLast in the schema.
        /// </summary>
        [Column(Storage = "_NameLast", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string NameLast
        {
            get
            {
                return this._NameLast;
            }
            set
            {
                if (this._NameLast != value)
                {
                    this.OnNameLastChanging(value);
                    this.SendPropertyChanging();
                    this._NameLast = value;
                    this.SendPropertyChanged("NameLast");
                    this.OnNameLastChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Type in the schema.
        /// </summary>
        [Column(Storage = "_Type", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CurrentDevice in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User_Device", Storage="_CurrentDevice", ThisKey="ID", OtherKey="UserID", DeleteRule="SET NULL")]
        public EntitySet<Device> CurrentDevice
        {
            get
            {
                return this._CurrentDevice;
            }
            set
            {
                this._CurrentDevice.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_CurrentDevice(Device entity)
        {
            this.SendPropertyChanging("CurrentDevice");
            entity.CurrentUser = this;
        }
    
        private void detach_CurrentDevice(Device entity)
        {
            this.SendPropertyChanging("CurrentDevice");
            entity.CurrentUser = null;
        }
    }

    /// <summary>
    /// There are no comments for WiFindUs.Eye.Waypoint in the schema.
    /// </summary>
    [Table(Name = @"wfu_eye_db.waypoints")]
    public partial class Waypoint : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _ID;

        private System.DateTime _Created = DateTime.Now;

        private double _Latitude;

        private double _Longitude;

        private System.Nullable<double> _Altitude;

        private System.Nullable<double> _Accuracy;

        private string _Type;

        private string _Category;

        private string _Description;

        private int _Severity = 0;

        private int _Code = 0;

        private System.Nullable<long> _NextWaypointID;

        private System.Nullable<long> _ReportedByID;

        private bool _Archived = false;

        private System.Nullable<System.DateTime> _ArchivedTime;
        #pragma warning restore 0649

        private EntitySet<Device> _AssignedDevices;

        private EntityRef<User> _ReportingUser;

        private EntitySet<User> _ArchivedResponders;

        private EntityRef<Waypoint> _NextWaypoint;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(long value);
        partial void OnIDChanged();
        partial void OnCreatedChanging(System.DateTime value);
        partial void OnCreatedChanged();
        partial void OnLatitudeChanging(double value);
        partial void OnLatitudeChanged();
        partial void OnLongitudeChanging(double value);
        partial void OnLongitudeChanged();
        partial void OnAltitudeChanging(System.Nullable<double> value);
        partial void OnAltitudeChanged();
        partial void OnAccuracyChanging(System.Nullable<double> value);
        partial void OnAccuracyChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        partial void OnCategoryChanging(string value);
        partial void OnCategoryChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnSeverityChanging(int value);
        partial void OnSeverityChanged();
        partial void OnCodeChanging(int value);
        partial void OnCodeChanged();
        partial void OnNextWaypointIDChanging(System.Nullable<long> value);
        partial void OnNextWaypointIDChanged();
        partial void OnReportedByIDChanging(System.Nullable<long> value);
        partial void OnReportedByIDChanged();
        partial void OnArchivedChanging(bool value);
        partial void OnArchivedChanged();
        partial void OnArchivedTimeChanging(System.Nullable<System.DateTime> value);
        partial void OnArchivedTimeChanged();
        #endregion

        public Waypoint()
        {
            this._AssignedDevices = new EntitySet<Device>(new Action<Device>(this.attach_AssignedDevices), new Action<Device>(this.detach_AssignedDevices));
            this._ReportingUser  = default(EntityRef<User>);
            this._ArchivedResponders = new EntitySet<User>(new Action<User>(this.attach_ArchivedResponders), new Action<User>(this.detach_ArchivedResponders));
            this._NextWaypoint  = default(EntityRef<Waypoint>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(9) UNSIGNED NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long ID
        {
            get
            {
                return this._ID;
            }
        }

    
        /// <summary>
        /// There are no comments for Created in the schema.
        /// </summary>
        [Column(Storage = "_Created", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Created
        {
            get
            {
                return this._Created;
            }
        }

    
        /// <summary>
        /// There are no comments for Latitude in the schema.
        /// </summary>
        [Column(Storage = "_Latitude", CanBeNull = false, DbType = "DOUBLE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public override double Latitude
        {
            get
            {
                return this._Latitude;
            }
        }

    
        /// <summary>
        /// There are no comments for Longitude in the schema.
        /// </summary>
        [Column(Storage = "_Longitude", CanBeNull = false, DbType = "DOUBLE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public override double Longitude
        {
            get
            {
                return this._Longitude;
            }
        }

    
        /// <summary>
        /// There are no comments for Altitude in the schema.
        /// </summary>
        [Column(Storage = "_Altitude", DbType = "DOUBLE", UpdateCheck = UpdateCheck.Never)]
        public override System.Nullable<double> Altitude
        {
            get
            {
                return this._Altitude;
            }
        }

    
        /// <summary>
        /// There are no comments for Accuracy in the schema.
        /// </summary>
        [Column(Storage = "_Accuracy", DbType = "DOUBLE", UpdateCheck = UpdateCheck.Never)]
        public override System.Nullable<double> Accuracy
        {
            get
            {
                return this._Accuracy;
            }
        }

    
        /// <summary>
        /// There are no comments for Type in the schema.
        /// </summary>
        [Column(Storage = "_Type", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Category in the schema.
        /// </summary>
        [Column(Storage = "_Category", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Category
        {
            get
            {
                return this._Category;
            }
            set
            {
                if (this._Category != value)
                {
                    this.OnCategoryChanging(value);
                    this.SendPropertyChanging();
                    this._Category = value;
                    this.SendPropertyChanged("Category");
                    this.OnCategoryChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Storage = "_Description", CanBeNull = false, DbType = "VARCHAR(2048) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Severity in the schema.
        /// </summary>
        [Column(Storage = "_Severity", CanBeNull = false, DbType = "INT(9) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Severity
        {
            get
            {
                return this._Severity;
            }
            set
            {
                if (this._Severity != value)
                {
                    this.OnSeverityChanging(value);
                    this.SendPropertyChanging();
                    this._Severity = value;
                    this.SendPropertyChanged("Severity");
                    this.OnSeverityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Code in the schema.
        /// </summary>
        [Column(Storage = "_Code", CanBeNull = false, DbType = "INT(9) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if (this._Code != value)
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NextWaypointID in the schema.
        /// </summary>
        [Column(Storage = "_NextWaypointID", DbType = "INT(9) UNSIGNED NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> NextWaypointID
        {
            get
            {
                return this._NextWaypointID;
            }
            set
            {
                if (this._NextWaypointID != value)
                {
                    if (this._NextWaypoint.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnNextWaypointIDChanging(value);
                    this.SendPropertyChanging();
                    this._NextWaypointID = value;
                    this.SendPropertyChanged("NextWaypointID");
                    this.OnNextWaypointIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReportedByID in the schema.
        /// </summary>
        [Column(Storage = "_ReportedByID", DbType = "INT(9) UNSIGNED NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> ReportedByID
        {
            get
            {
                return this._ReportedByID;
            }
            set
            {
                if (this._ReportedByID != value)
                {
                    if (this._ReportingUser.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnReportedByIDChanging(value);
                    this.SendPropertyChanging();
                    this._ReportedByID = value;
                    this.SendPropertyChanged("ReportedByID");
                    this.OnReportedByIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Archived in the schema.
        /// </summary>
        [Column(Storage = "_Archived", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Archived
        {
            get
            {
                return this._Archived;
            }
            set
            {
                if (this._Archived != value)
                {
                    this.OnArchivedChanging(value);
                    this.SendPropertyChanging();
                    this._Archived = value;
                    this.SendPropertyChanged("Archived");
                    this.OnArchivedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ArchivedTime in the schema.
        /// </summary>
        [Column(Storage = "_ArchivedTime", DbType = "DATETIME NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> ArchivedTime
        {
            get
            {
                return this._ArchivedTime;
            }
            set
            {
                if (this._ArchivedTime != value)
                {
                    this.OnArchivedTimeChanging(value);
                    this.SendPropertyChanging();
                    this._ArchivedTime = value;
                    this.SendPropertyChanged("ArchivedTime");
                    this.OnArchivedTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AssignedDevices in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Waypoint_Device", Storage="_AssignedDevices", ThisKey="ID", OtherKey="WaypointID", DeleteRule="SET NULL")]
        public EntitySet<Device> AssignedDevices
        {
            get
            {
                return this._AssignedDevices;
            }
            set
            {
                this._AssignedDevices.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for ReportingUser in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User_Waypoint", Storage="_ReportingUser", ThisKey="ReportedByID", OtherKey="ID", IsForeignKey=true)]
        public User ReportingUser
        {
            get
            {
                return this._ReportingUser.Entity;
            }
            set
            {
                User previousValue = this._ReportingUser.Entity;
                if ((previousValue != value) || (this._ReportingUser.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._ReportingUser.Entity = null;
                    }
                    this._ReportingUser.Entity = value;
                    if (value != null)
                    {
                        this._ReportedByID = value.ID;
                    }
                    else
                    {
                        this._ReportedByID = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("ReportingUser");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ArchivedResponders in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Waypoint_User", Storage="_ArchivedResponders", ThisKey="ID", OtherKey="ID", LinkTableName=@"wfu_eye_db.archivedwaypointresponders", LinkThisKey=@"WaypointID", LinkOtherKey=@"UserID")]
        public EntitySet<User> ArchivedResponders
        {
            get
            {
                return this._ArchivedResponders;
            }
            set
            {
                this._ArchivedResponders.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for NextWaypoint in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Waypoint_Waypoint", Storage="_NextWaypoint", ThisKey="NextWaypointID", OtherKey="ID", IsForeignKey=true)]
        public Waypoint NextWaypoint
        {
            get
            {
                return this._NextWaypoint.Entity;
            }
            set
            {
                Waypoint previousValue = this._NextWaypoint.Entity;
                if ((previousValue != value) || (this._NextWaypoint.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._NextWaypoint.Entity = null;
                    }
                    this._NextWaypoint.Entity = value;
                    if (value != null)
                    {
                        this._NextWaypointID = value.ID;
                    }
                    else
                    {
                        this._NextWaypointID = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("NextWaypoint");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_AssignedDevices(Device entity)
        {
            this.SendPropertyChanging("AssignedDevices");
            entity.AssignedWaypoint = this;
        }
    
        private void detach_AssignedDevices(Device entity)
        {
            this.SendPropertyChanging("AssignedDevices");
            entity.AssignedWaypoint = null;
        }

        private void attach_ArchivedResponders(User entity)
        {
            this.SendPropertyChanging("ArchivedResponders");
        }
    
        private void detach_ArchivedResponders(User entity)
        {
            this.SendPropertyChanging("ArchivedResponders");
        }
    }

}
