//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 1/12/2014 9:13:03 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace WiFindUs.Eye
{

    /// <summary>
    /// There are no comments for WiFindUs.Eye.User in the schema.
    /// </summary>
    [Table(Name = @"wfu_eye_db.Users")]
    public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _ID;

        private System.DateTime _Created = DateTime.Now;

        private string _NameFirst;

        private string _NameMiddle;

        private string _NameLast;

        private string _Type;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(long value);
        partial void OnIDChanged();
        partial void OnCreatedChanging(System.DateTime value);
        partial void OnCreatedChanged();
        partial void OnNameFirstChanging(string value);
        partial void OnNameFirstChanged();
        partial void OnNameMiddleChanging(string value);
        partial void OnNameMiddleChanged();
        partial void OnNameLastChanging(string value);
        partial void OnNameLastChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        #endregion

        public User()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "bigint NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long ID
        {
            get
            {
                return this._ID;
            }
        }

    
        /// <summary>
        /// There are no comments for Created in the schema.
        /// </summary>
        [Column(Storage = "_Created", CanBeNull = false, DbType = "datetime NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Created
        {
            get
            {
                return this._Created;
            }
        }

    
        /// <summary>
        /// There are no comments for NameFirst in the schema.
        /// </summary>
        [Column(Storage = "_NameFirst", CanBeNull = false, DbType = "varchar(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string NameFirst
        {
            get
            {
                return this._NameFirst;
            }
            set
            {
                if (this._NameFirst != value)
                {
                    this.OnNameFirstChanging(value);
                    this.SendPropertyChanging();
                    this._NameFirst = value;
                    this.SendPropertyChanged("NameFirst");
                    this.OnNameFirstChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NameMiddle in the schema.
        /// </summary>
        [Column(Storage = "_NameMiddle", CanBeNull = false, DbType = "varchar(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string NameMiddle
        {
            get
            {
                return this._NameMiddle;
            }
            set
            {
                if (this._NameMiddle != value)
                {
                    this.OnNameMiddleChanging(value);
                    this.SendPropertyChanging();
                    this._NameMiddle = value;
                    this.SendPropertyChanged("NameMiddle");
                    this.OnNameMiddleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NameLast in the schema.
        /// </summary>
        [Column(Storage = "_NameLast", CanBeNull = false, DbType = "varchar(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string NameLast
        {
            get
            {
                return this._NameLast;
            }
            set
            {
                if (this._NameLast != value)
                {
                    this.OnNameLastChanging(value);
                    this.SendPropertyChanging();
                    this._NameLast = value;
                    this.SendPropertyChanged("NameLast");
                    this.OnNameLastChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Type in the schema.
        /// </summary>
        [Column(Storage = "_Type", CanBeNull = false, DbType = "varchar(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
