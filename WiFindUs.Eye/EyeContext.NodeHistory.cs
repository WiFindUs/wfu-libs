//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 4/12/2014 3:35:05 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace WiFindUs.Eye
{

    /// <summary>
    /// There are no comments for WiFindUs.Eye.NodeHistory in the schema.
    /// </summary>
    [Table(Name = @"wfu_eye_db.NodeHistories")]
    public partial class NodeHistory : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _NodeID;

        private long _Created;

        private System.Nullable<double> _Latitude;

        private System.Nullable<double> _Longitude;

        private System.Nullable<double> _Altitude;

        private System.Nullable<double> _Accuracy;
        #pragma warning restore 0649

        private EntityRef<Node> _Node;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnNodeIDChanging(long value);
        partial void OnNodeIDChanged();
        partial void OnCreatedChanging(long value);
        partial void OnCreatedChanged();
        partial void OnLatitudeChanging(System.Nullable<double> value);
        partial void OnLatitudeChanged();
        partial void OnLongitudeChanging(System.Nullable<double> value);
        partial void OnLongitudeChanged();
        partial void OnAltitudeChanging(System.Nullable<double> value);
        partial void OnAltitudeChanged();
        partial void OnAccuracyChanging(System.Nullable<double> value);
        partial void OnAccuracyChanged();
        #endregion

        public NodeHistory()
        {
            this._Node  = default(EntityRef<Node>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for NodeID in the schema.
        /// </summary>
        [Column(Storage = "_NodeID", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        public long NodeID
        {
            get
            {
                return this._NodeID;
            }
            set
            {
                if (this._NodeID != value)
                {
                    if (this._Node.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnNodeIDChanging(value);
                    this.SendPropertyChanging();
                    this._NodeID = value;
                    this.SendPropertyChanged("NodeID");
                    this.OnNodeIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Created in the schema.
        /// </summary>
        [Column(Storage = "_Created", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        public long Created
        {
            get
            {
                return this._Created;
            }
            set
            {
                if (this._Created != value)
                {
                    this.OnCreatedChanging(value);
                    this.SendPropertyChanging();
                    this._Created = value;
                    this.SendPropertyChanged("Created");
                    this.OnCreatedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Latitude in the schema.
        /// </summary>
        [Column(Storage = "_Latitude", DbType = "double NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<double> Latitude
        {
            get
            {
                return this._Latitude;
            }
            set
            {
                if (this._Latitude != value)
                {
                    this.OnLatitudeChanging(value);
                    this.SendPropertyChanging();
                    this._Latitude = value;
                    this.SendPropertyChanged("Latitude");
                    this.OnLatitudeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Longitude in the schema.
        /// </summary>
        [Column(Storage = "_Longitude", DbType = "double NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<double> Longitude
        {
            get
            {
                return this._Longitude;
            }
            set
            {
                if (this._Longitude != value)
                {
                    this.OnLongitudeChanging(value);
                    this.SendPropertyChanging();
                    this._Longitude = value;
                    this.SendPropertyChanged("Longitude");
                    this.OnLongitudeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Altitude in the schema.
        /// </summary>
        [Column(Storage = "_Altitude", DbType = "double NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<double> Altitude
        {
            get
            {
                return this._Altitude;
            }
            set
            {
                if (this._Altitude != value)
                {
                    this.OnAltitudeChanging(value);
                    this.SendPropertyChanging();
                    this._Altitude = value;
                    this.SendPropertyChanged("Altitude");
                    this.OnAltitudeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Accuracy in the schema.
        /// </summary>
        [Column(Storage = "_Accuracy", DbType = "double NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<double> Accuracy
        {
            get
            {
                return this._Accuracy;
            }
            set
            {
                if (this._Accuracy != value)
                {
                    this.OnAccuracyChanging(value);
                    this.SendPropertyChanging();
                    this._Accuracy = value;
                    this.SendPropertyChanged("Accuracy");
                    this.OnAccuracyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Node in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Node_NodeHistory", Storage="_Node", ThisKey="NodeID", OtherKey="ID", IsForeignKey=true)]
        public Node Node
        {
            get
            {
                return this._Node.Entity;
            }
            set
            {
                Node previousValue = this._Node.Entity;
                if ((previousValue != value) || (this._Node.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Node.Entity = null;
                        previousValue.History.Remove(this);
                    }
                    this._Node.Entity = value;
                    if (value != null)
                    {
                        this._NodeID = value.ID;
                        value.History.Add(this);
                    }
                    else
                    {
                        this._NodeID = default(long);
                    }
                    this.SendPropertyChanged("Node");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
