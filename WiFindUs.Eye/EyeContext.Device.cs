//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 25/11/2014 2:25:54 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace WiFindUs.Eye
{

    /// <summary>
    /// There are no comments for WiFindUs.Eye.Device in the schema.
    /// </summary>
    [Table(Name = @"wfu_eye_db.Devices")]
    public partial class Device : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _ID;

        private System.DateTime _Created = DateTime.Now;

        private string _Type = @"PHO";

        private System.Nullable<long> _WaypointID;
        #pragma warning restore 0649

        private EntitySet<DeviceState> _DeviceStates;

        private EntityRef<Waypoint> _AssignedWaypoint;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(long value);
        partial void OnIDChanged();
        partial void OnCreatedChanging(System.DateTime value);
        partial void OnCreatedChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        partial void OnWaypointIDChanging(System.Nullable<long> value);
        partial void OnWaypointIDChanged();
        #endregion

        public Device()
        {
            this._DeviceStates = new EntitySet<DeviceState>(new Action<DeviceState>(this.attach_DeviceStates), new Action<DeviceState>(this.detach_DeviceStates));
            this._AssignedWaypoint  = default(EntityRef<Waypoint>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true)]
        public long ID
        {
            get
            {
                return this._ID;
            }
        }

    
        /// <summary>
        /// There are no comments for Created in the schema.
        /// </summary>
        [Column(Storage = "_Created", CanBeNull = false, DbType = "datetime NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Created
        {
            get
            {
                return this._Created;
            }
        }

    
        /// <summary>
        /// There are no comments for Type in the schema.
        /// </summary>
        [Column(Storage = "_Type", CanBeNull = false, DbType = "varchar(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Type
        {
            get
            {
                return this._Type;
            }
        }

    
        /// <summary>
        /// There are no comments for WaypointID in the schema.
        /// </summary>
        [Column(Storage = "_WaypointID", DbType = "bigint NULL", UpdateCheck = UpdateCheck.Never)]
        protected System.Nullable<long> WaypointID
        {
            get
            {
                return this._WaypointID;
            }
            set
            {
                if (this._WaypointID != value)
                {
                    if (this._AssignedWaypoint.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnWaypointIDChanging(value);
                    this.SendPropertyChanging();
                    this._WaypointID = value;
                    this.SendPropertyChanged("WaypointID");
                    this.OnWaypointIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeviceStates in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Device_DeviceState", Storage="_DeviceStates", ThisKey="ID", OtherKey="DeviceID", DeleteRule="CASCADE")]
        internal EntitySet<DeviceState> DeviceStates
        {
            get
            {
                return this._DeviceStates;
            }
            set
            {
                this._DeviceStates.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for AssignedWaypoint in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Waypoint_Device", Storage="_AssignedWaypoint", ThisKey="WaypointID", OtherKey="ID", IsForeignKey=true)]
        public Waypoint AssignedWaypoint
        {
            get
            {
                return this._AssignedWaypoint.Entity;
            }
            set
            {
                Waypoint previousValue = this._AssignedWaypoint.Entity;
                if ((previousValue != value) || (this._AssignedWaypoint.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._AssignedWaypoint.Entity = null;
                        previousValue.AssignedDevices.Remove(this);
                    }
                    this._AssignedWaypoint.Entity = value;
                    if (value != null)
                    {
                        this._WaypointID = value.ID;
                        value.AssignedDevices.Add(this);
                    }
                    else
                    {
                        this._WaypointID = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("AssignedWaypoint");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_DeviceStates(DeviceState entity)
        {
            this.SendPropertyChanging("DeviceStates");
            entity.Device = this;
        }
    
        private void detach_DeviceStates(DeviceState entity)
        {
            this.SendPropertyChanging("DeviceStates");
            entity.Device = null;
        }
    }

}
