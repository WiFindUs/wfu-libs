//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 5/04/2015 12:40:05 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;

namespace WiFindUs.Eye
{

    /// <summary>
    /// There are no comments for WiFindUs.Eye.Node in the schema.
    /// </summary>
    [Table(Name = @"wfu_eye_db.Nodes")]
    public partial class Node : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private uint _ID;

        private ulong _Created;

        private ulong _LastUpdated;

        private bool _Active = false;

        private System.Nullable<bool> _MeshPoint;

        private System.Nullable<bool> _AccessPoint;

        private System.Nullable<bool> _GPSD;

        private System.Nullable<uint> _SatelliteCount;

        private System.Nullable<bool> _MockLocation;

        private System.Nullable<bool> _DHCPD;

        private System.Nullable<uint> _Number = 0;

        private System.Nullable<double> _Latitude;

        private System.Nullable<double> _Altitude;

        private System.Nullable<double> _Longitude;

        private System.Nullable<double> _Accuracy;

        private System.Nullable<double> _Voltage;
        #pragma warning restore 0649

        private EntitySet<Device> _Devices;

        private EntitySet<NodeLink> _StartLinks;

        private EntitySet<NodeLink> _EndLinks;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(uint value);
        partial void OnIDChanged();
        partial void OnCreatedChanging(ulong value);
        partial void OnCreatedChanged();
        partial void OnLastUpdatedChanging(ulong value);
        partial void OnLastUpdatedChanged();
        partial void OnActiveChanging(bool value);
        partial void OnActiveChanged();
        partial void OnMeshPointChanging(System.Nullable<bool> value);
        partial void OnMeshPointChanged();
        partial void OnAccessPointChanging(System.Nullable<bool> value);
        partial void OnAccessPointChanged();
        partial void OnGPSDChanging(System.Nullable<bool> value);
        partial void OnGPSDChanged();
        partial void OnSatelliteCountChanging(System.Nullable<uint> value);
        partial void OnSatelliteCountChanged();
        partial void OnMockLocationChanging(System.Nullable<bool> value);
        partial void OnMockLocationChanged();
        partial void OnDHCPDChanging(System.Nullable<bool> value);
        partial void OnDHCPDChanged();
        partial void OnNumberChanging(System.Nullable<uint> value);
        partial void OnNumberChanged();
        partial void OnLatitudeChanging(System.Nullable<double> value);
        partial void OnLatitudeChanged();
        partial void OnAltitudeChanging(System.Nullable<double> value);
        partial void OnAltitudeChanged();
        partial void OnLongitudeChanging(System.Nullable<double> value);
        partial void OnLongitudeChanged();
        partial void OnAccuracyChanging(System.Nullable<double> value);
        partial void OnAccuracyChanged();
        partial void OnVoltageChanging(System.Nullable<double> value);
        partial void OnVoltageChanged();
        #endregion

        public Node()
        {
            this._Devices = new EntitySet<Device>(new Action<Device>(this.attach_Devices), new Action<Device>(this.detach_Devices));
            this._StartLinks = new EntitySet<NodeLink>(new Action<NodeLink>(this.attach_StartLinks), new Action<NodeLink>(this.detach_StartLinks));
            this._EndLinks = new EntitySet<NodeLink>(new Action<NodeLink>(this.attach_EndLinks), new Action<NodeLink>(this.detach_EndLinks));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "INTEGER UNSIGNED NOT NULL", IsPrimaryKey = true)]
        public uint ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Created in the schema.
        /// </summary>
        [Column(Storage = "_Created", CanBeNull = false, DbType = "bigint UNSIGNED NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public ulong Created
        {
            get
            {
                return this._Created;
            }
            set
            {
                if (this._Created != value)
                {
                    this.OnCreatedChanging(value);
                    this.SendPropertyChanging();
                    this._Created = value;
                    this.SendPropertyChanged("Created");
                    this.OnCreatedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LastUpdated in the schema.
        /// </summary>
        [Column(Storage = "_LastUpdated", CanBeNull = false, DbType = "bigint UNSIGNED NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public ulong LastUpdated
        {
            get
            {
                return this._LastUpdated;
            }
            set
            {
                if (this._LastUpdated != value)
                {
                    this.OnLastUpdatedChanging(value);
                    this.SendPropertyChanging();
                    this._LastUpdated = value;
                    this.SendPropertyChanged("LastUpdated");
                    this.OnLastUpdatedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Active in the schema.
        /// </summary>
        [Column(Storage = "_Active", CanBeNull = false, DbType = "bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Active
        {
            get
            {
                return this._Active;
            }
            set
            {
                if (this._Active != value)
                {
                    this.OnActiveChanging(value);
                    this.SendPropertyChanging();
                    this._Active = value;
                    this.SendPropertyChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MeshPoint in the schema.
        /// </summary>
        [Column(Storage = "_MeshPoint", DbType = "bit NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> MeshPoint
        {
            get
            {
                return this._MeshPoint;
            }
            set
            {
                if (this._MeshPoint != value)
                {
                    this.OnMeshPointChanging(value);
                    this.SendPropertyChanging();
                    this._MeshPoint = value;
                    this.SendPropertyChanged("MeshPoint");
                    this.OnMeshPointChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AccessPoint in the schema.
        /// </summary>
        [Column(Storage = "_AccessPoint", DbType = "bit NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> AccessPoint
        {
            get
            {
                return this._AccessPoint;
            }
            set
            {
                if (this._AccessPoint != value)
                {
                    this.OnAccessPointChanging(value);
                    this.SendPropertyChanging();
                    this._AccessPoint = value;
                    this.SendPropertyChanged("AccessPoint");
                    this.OnAccessPointChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GPSD in the schema.
        /// </summary>
        [Column(Storage = "_GPSD", DbType = "bit NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> GPSD
        {
            get
            {
                return this._GPSD;
            }
            set
            {
                if (this._GPSD != value)
                {
                    this.OnGPSDChanging(value);
                    this.SendPropertyChanging();
                    this._GPSD = value;
                    this.SendPropertyChanged("GPSD");
                    this.OnGPSDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SatelliteCount in the schema.
        /// </summary>
        [Column(Storage = "_SatelliteCount", DbType = "INTEGER UNSIGNED NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<uint> SatelliteCount
        {
            get
            {
                return this._SatelliteCount;
            }
            set
            {
                if (this._SatelliteCount != value)
                {
                    this.OnSatelliteCountChanging(value);
                    this.SendPropertyChanging();
                    this._SatelliteCount = value;
                    this.SendPropertyChanged("SatelliteCount");
                    this.OnSatelliteCountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MockLocation in the schema.
        /// </summary>
        [Column(Storage = "_MockLocation", DbType = "bit NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> MockLocation
        {
            get
            {
                return this._MockLocation;
            }
            set
            {
                if (this._MockLocation != value)
                {
                    this.OnMockLocationChanging(value);
                    this.SendPropertyChanging();
                    this._MockLocation = value;
                    this.SendPropertyChanged("MockLocation");
                    this.OnMockLocationChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DHCPD in the schema.
        /// </summary>
        [Column(Name = @"FakeGPS", Storage = "_DHCPD", DbType = "bit NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> DHCPD
        {
            get
            {
                return this._DHCPD;
            }
            set
            {
                if (this._DHCPD != value)
                {
                    this.OnDHCPDChanging(value);
                    this.SendPropertyChanging();
                    this._DHCPD = value;
                    this.SendPropertyChanged("DHCPD");
                    this.OnDHCPDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Number in the schema.
        /// </summary>
        [Column(Storage = "_Number", DbType = "INTEGER UNSIGNED NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<uint> Number
        {
            get
            {
                return this._Number;
            }
            set
            {
                if (this._Number != value)
                {
                    this.OnNumberChanging(value);
                    this.SendPropertyChanging();
                    this._Number = value;
                    this.SendPropertyChanged("Number");
                    this.OnNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Latitude in the schema.
        /// </summary>
        [Column(Storage = "_Latitude", DbType = "double NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<double> Latitude
        {
            get
            {
                return this._Latitude;
            }
            set
            {
                if (this._Latitude != value)
                {
                    this.OnLatitudeChanging(value);
                    this.SendPropertyChanging();
                    this._Latitude = value;
                    this.SendPropertyChanged("Latitude");
                    this.OnLatitudeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Altitude in the schema.
        /// </summary>
        [Column(Storage = "_Altitude", DbType = "double NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<double> Altitude
        {
            get
            {
                return this._Altitude;
            }
            set
            {
                if (this._Altitude != value)
                {
                    this.OnAltitudeChanging(value);
                    this.SendPropertyChanging();
                    this._Altitude = value;
                    this.SendPropertyChanged("Altitude");
                    this.OnAltitudeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Longitude in the schema.
        /// </summary>
        [Column(Storage = "_Longitude", DbType = "double NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<double> Longitude
        {
            get
            {
                return this._Longitude;
            }
            set
            {
                if (this._Longitude != value)
                {
                    this.OnLongitudeChanging(value);
                    this.SendPropertyChanging();
                    this._Longitude = value;
                    this.SendPropertyChanged("Longitude");
                    this.OnLongitudeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Accuracy in the schema.
        /// </summary>
        [Column(Storage = "_Accuracy", DbType = "double NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<double> Accuracy
        {
            get
            {
                return this._Accuracy;
            }
            set
            {
                if (this._Accuracy != value)
                {
                    this.OnAccuracyChanging(value);
                    this.SendPropertyChanging();
                    this._Accuracy = value;
                    this.SendPropertyChanged("Accuracy");
                    this.OnAccuracyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Voltage in the schema.
        /// </summary>
        [Column(Storage = "_Voltage", DbType = "double NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<double> Voltage
        {
            get
            {
                return this._Voltage;
            }
            set
            {
                if (this._Voltage != value)
                {
                    this.OnVoltageChanging(value);
                    this.SendPropertyChanging();
                    this._Voltage = value;
                    this.SendPropertyChanged("Voltage");
                    this.OnVoltageChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Devices in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Node_Device", Storage="_Devices", ThisKey="ID", OtherKey="NodeID", DeleteRule="SET NULL")]
        public EntitySet<Device> Devices
        {
            get
            {
                return this._Devices;
            }
            set
            {
                this._Devices.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for StartLinks in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Node_StartLink", Storage="_StartLinks", ThisKey="ID", OtherKey="StartNodeID", DeleteRule="CASCADE")]
        public EntitySet<NodeLink> StartLinks
        {
            get
            {
                return this._StartLinks;
            }
            set
            {
                this._StartLinks.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for EndLinks in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Node_EndLink", Storage="_EndLinks", ThisKey="ID", OtherKey="EndNodeID", DeleteRule="CASCADE")]
        public EntitySet<NodeLink> EndLinks
        {
            get
            {
                return this._EndLinks;
            }
            set
            {
                this._EndLinks.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Devices(Device entity)
        {
            this.SendPropertyChanging("Devices");
            entity.Node = this;
        }
    
        private void detach_Devices(Device entity)
        {
            this.SendPropertyChanging("Devices");
            entity.Node = null;
        }

        private void attach_StartLinks(NodeLink entity)
        {
            this.SendPropertyChanging("StartLinks");
            entity.Start = this;
        }
    
        private void detach_StartLinks(NodeLink entity)
        {
            this.SendPropertyChanging("StartLinks");
            entity.Start = null;
        }

        private void attach_EndLinks(NodeLink entity)
        {
            this.SendPropertyChanging("EndLinks");
            entity.End = this;
        }
    
        private void detach_EndLinks(NodeLink entity)
        {
            this.SendPropertyChanging("EndLinks");
            entity.End = null;
        }
    }

}
