//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 5/04/2015 12:40:05 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace WiFindUs.Eye
{

    /// <summary>
    /// There are no comments for WiFindUs.Eye.NodeLink in the schema.
    /// </summary>
    [Table(Name = @"wfu_eye_db.NodeLinks")]
    public partial class NodeLink : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private uint _StartNodeID;

        private uint _EndNodeID;

        private bool _Active = false;

        private System.Nullable<double> _SignalStrength;

        private System.Nullable<double> _LinkSpeed;
        #pragma warning restore 0649

        private EntityRef<Node> _Start;

        private EntityRef<Node> _End;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnStartNodeIDChanging(uint value);
        partial void OnStartNodeIDChanged();
        partial void OnEndNodeIDChanging(uint value);
        partial void OnEndNodeIDChanged();
        partial void OnActiveChanging(bool value);
        partial void OnActiveChanged();
        partial void OnSignalStrengthChanging(System.Nullable<double> value);
        partial void OnSignalStrengthChanged();
        partial void OnLinkSpeedChanging(System.Nullable<double> value);
        partial void OnLinkSpeedChanged();
        #endregion

        public NodeLink()
        {
            this._Start  = default(EntityRef<Node>);
            this._End  = default(EntityRef<Node>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for StartNodeID in the schema.
        /// </summary>
        [Column(Storage = "_StartNodeID", CanBeNull = false, DbType = "INTEGER UNSIGNED NULL", IsPrimaryKey = true)]
        public uint StartNodeID
        {
            get
            {
                return this._StartNodeID;
            }
            set
            {
                if (this._StartNodeID != value)
                {
                    if (this._Start.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnStartNodeIDChanging(value);
                    this.SendPropertyChanging();
                    this._StartNodeID = value;
                    this.SendPropertyChanged("StartNodeID");
                    this.OnStartNodeIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EndNodeID in the schema.
        /// </summary>
        [Column(Storage = "_EndNodeID", CanBeNull = false, DbType = "INTEGER UNSIGNED NULL", IsPrimaryKey = true)]
        public uint EndNodeID
        {
            get
            {
                return this._EndNodeID;
            }
            set
            {
                if (this._EndNodeID != value)
                {
                    if (this._End.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnEndNodeIDChanging(value);
                    this.SendPropertyChanging();
                    this._EndNodeID = value;
                    this.SendPropertyChanged("EndNodeID");
                    this.OnEndNodeIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Active in the schema.
        /// </summary>
        [Column(Storage = "_Active", CanBeNull = false, DbType = "bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Active
        {
            get
            {
                return this._Active;
            }
            set
            {
                if (this._Active != value)
                {
                    this.OnActiveChanging(value);
                    this.SendPropertyChanging();
                    this._Active = value;
                    this.SendPropertyChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SignalStrength in the schema.
        /// </summary>
        [Column(Storage = "_SignalStrength", DbType = "double NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<double> SignalStrength
        {
            get
            {
                return this._SignalStrength;
            }
            set
            {
                if (this._SignalStrength != value)
                {
                    this.OnSignalStrengthChanging(value);
                    this.SendPropertyChanging();
                    this._SignalStrength = value;
                    this.SendPropertyChanged("SignalStrength");
                    this.OnSignalStrengthChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LinkSpeed in the schema.
        /// </summary>
        [Column(Storage = "_LinkSpeed", DbType = "double NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<double> LinkSpeed
        {
            get
            {
                return this._LinkSpeed;
            }
            set
            {
                if (this._LinkSpeed != value)
                {
                    this.OnLinkSpeedChanging(value);
                    this.SendPropertyChanging();
                    this._LinkSpeed = value;
                    this.SendPropertyChanged("LinkSpeed");
                    this.OnLinkSpeedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Start in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Node_StartLink", Storage="_Start", ThisKey="StartNodeID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
        public Node Start
        {
            get
            {
                return this._Start.Entity;
            }
            set
            {
                Node previousValue = this._Start.Entity;
                if ((previousValue != value) || (this._Start.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Start.Entity = null;
                        previousValue.StartLinks.Remove(this);
                    }
                    this._Start.Entity = value;
                    if (value != null)
                    {
                        this._StartNodeID = value.ID;
                        value.StartLinks.Add(this);
                    }
                    else
                    {
                        this._StartNodeID = default(uint);
                    }
                    this.SendPropertyChanged("Start");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for End in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Node_EndLink", Storage="_End", ThisKey="EndNodeID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
        public Node End
        {
            get
            {
                return this._End.Entity;
            }
            set
            {
                Node previousValue = this._End.Entity;
                if ((previousValue != value) || (this._End.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._End.Entity = null;
                        previousValue.EndLinks.Remove(this);
                    }
                    this._End.Entity = value;
                    if (value != null)
                    {
                        this._EndNodeID = value.ID;
                        value.EndLinks.Add(this);
                    }
                    else
                    {
                        this._EndNodeID = default(uint);
                    }
                    this.SendPropertyChanged("End");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
